/*
 * generated by Xtext 2.25.0
 */
package fr.irisa.diverse.adaptivesemantics.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.irisa.diverse.adaptivesemantics.ide.contentassist.antlr.internal.InternalAdaptSemParser;
import fr.irisa.diverse.adaptivesemantics.services.AdaptSemGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class AdaptSemParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AdaptSemGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AdaptSemGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getRuleAccess().getAlternatives_7_1(), "rule__Rule__Alternatives_7_1");
			builder.put(grammarAccess.getAssigneeAccess().getAlternatives(), "rule__Assignee__Alternatives");
			builder.put(grammarAccess.getTerminalAccessExpressionAccess().getAlternatives(), "rule__TerminalAccessExpression__Alternatives");
			builder.put(grammarAccess.getTermDefAccess().getAlternatives(), "rule__TermDef__Alternatives");
			builder.put(grammarAccess.getTermRefAccess().getAlternatives(), "rule__TermRef__Alternatives");
			builder.put(grammarAccess.getSingleTermDefAccess().getAlternatives(), "rule__SingleTermDef__Alternatives");
			builder.put(grammarAccess.getSingleTermRefAccess().getAlternatives(), "rule__SingleTermRef__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getAdaptiveSemanticsAccess().getGroup(), "rule__AdaptiveSemantics__Group__0");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_4(), "rule__Rule__Group_4__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_5(), "rule__Rule__Group_5__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_6(), "rule__Rule__Group_6__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_7(), "rule__Rule__Group_7__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
			builder.put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
			builder.put(grammarAccess.getOutputAccess().getGroup_2(), "rule__Output__Group_2__0");
			builder.put(grammarAccess.getOutputAccess().getGroup_2_1(), "rule__Output__Group_2_1__0");
			builder.put(grammarAccess.getBindingAccess().getGroup(), "rule__Binding__Group__0");
			builder.put(grammarAccess.getSemanticDomainAccessAccess().getGroup(), "rule__SemanticDomainAccess__Group__0");
			builder.put(grammarAccess.getSemanticDomainAccessAccess().getGroup_3(), "rule__SemanticDomainAccess__Group_3__0");
			builder.put(grammarAccess.getSelfAccess().getGroup(), "rule__Self__Group__0");
			builder.put(grammarAccess.getConclusionAccess().getGroup(), "rule__Conclusion__Group__0");
			builder.put(grammarAccess.getPremiseAccess().getGroup(), "rule__Premise__Group__0");
			builder.put(grammarAccess.getDefConfigurationAccess().getGroup(), "rule__DefConfiguration__Group__0");
			builder.put(grammarAccess.getDefConfigurationAccess().getGroup_2(), "rule__DefConfiguration__Group_2__0");
			builder.put(grammarAccess.getDefConfigurationAccess().getGroup_2_1(), "rule__DefConfiguration__Group_2_1__0");
			builder.put(grammarAccess.getRefConfigurationAccess().getGroup(), "rule__RefConfiguration__Group__0");
			builder.put(grammarAccess.getRefConfigurationAccess().getGroup_2(), "rule__RefConfiguration__Group_2__0");
			builder.put(grammarAccess.getRefConfigurationAccess().getGroup_2_1(), "rule__RefConfiguration__Group_2_1__0");
			builder.put(grammarAccess.getSymbolDefAccess().getGroup(), "rule__SymbolDef__Group__0");
			builder.put(grammarAccess.getSymbolRefAccess().getGroup(), "rule__SymbolRef__Group__0");
			builder.put(grammarAccess.getListDefAccess().getGroup(), "rule__ListDef__Group__0");
			builder.put(grammarAccess.getListRefAccess().getGroup(), "rule__ListRef__Group__0");
			builder.put(grammarAccess.getVoidListAccess().getGroup(), "rule__VoidList__Group__0");
			builder.put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
			builder.put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
			builder.put(grammarAccess.getOperationFQNAccess().getGroup(), "rule__OperationFQN__Group__0");
			builder.put(grammarAccess.getOperationFQNAccess().getGroup_1(), "rule__OperationFQN__Group_1__0");
			builder.put(grammarAccess.getAdaptiveSemanticsAccess().getModelAssignment_0(), "rule__AdaptiveSemantics__ModelAssignment_0");
			builder.put(grammarAccess.getAdaptiveSemanticsAccess().getImportsAssignment_1(), "rule__AdaptiveSemantics__ImportsAssignment_1");
			builder.put(grammarAccess.getAdaptiveSemanticsAccess().getRulesAssignment_2(), "rule__AdaptiveSemantics__RulesAssignment_2");
			builder.put(grammarAccess.getModelAccess().getImportURIAssignment_1(), "rule__Model__ImportURIAssignment_1");
			builder.put(grammarAccess.getModelAccess().getSemanticdomainAssignment_3(), "rule__Model__SemanticdomainAssignment_3");
			builder.put(grammarAccess.getImportAccess().getImportURIAssignment_1(), "rule__Import__ImportURIAssignment_1");
			builder.put(grammarAccess.getImportAccess().getNameAssignment_3(), "rule__Import__NameAssignment_3");
			builder.put(grammarAccess.getRuleAccess().getNameAssignment_1(), "rule__Rule__NameAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getConclusionAssignment_3(), "rule__Rule__ConclusionAssignment_3");
			builder.put(grammarAccess.getRuleAccess().getConditionsAssignment_4_1(), "rule__Rule__ConditionsAssignment_4_1");
			builder.put(grammarAccess.getRuleAccess().getPremisesAssignment_5_1(), "rule__Rule__PremisesAssignment_5_1");
			builder.put(grammarAccess.getRuleAccess().getBindingsAssignment_6_1(), "rule__Rule__BindingsAssignment_6_1");
			builder.put(grammarAccess.getRuleAccess().getInputsAssignment_7_1_0(), "rule__Rule__InputsAssignment_7_1_0");
			builder.put(grammarAccess.getRuleAccess().getOutputsAssignment_7_1_1(), "rule__Rule__OutputsAssignment_7_1_1");
			builder.put(grammarAccess.getConditionAccess().getOclPredicateAssignment_1(), "rule__Condition__OclPredicateAssignment_1");
			builder.put(grammarAccess.getInputAccess().getAssigneeAssignment_0(), "rule__Input__AssigneeAssignment_0");
			builder.put(grammarAccess.getInputAccess().getOperationAssignment_2(), "rule__Input__OperationAssignment_2");
			builder.put(grammarAccess.getOutputAccess().getOperationAssignment_0(), "rule__Output__OperationAssignment_0");
			builder.put(grammarAccess.getOutputAccess().getArgsAssignment_2_0(), "rule__Output__ArgsAssignment_2_0");
			builder.put(grammarAccess.getOutputAccess().getArgsAssignment_2_1_1(), "rule__Output__ArgsAssignment_2_1_1");
			builder.put(grammarAccess.getBindingAccess().getAssigneeAssignment_0(), "rule__Binding__AssigneeAssignment_0");
			builder.put(grammarAccess.getBindingAccess().getOclExpressionAssignment_2(), "rule__Binding__OclExpressionAssignment_2");
			builder.put(grammarAccess.getSemanticDomainAccessAccess().getRecieverAssignment_0(), "rule__SemanticDomainAccess__RecieverAssignment_0");
			builder.put(grammarAccess.getSemanticDomainAccessAccess().getFieldAssignment_2(), "rule__SemanticDomainAccess__FieldAssignment_2");
			builder.put(grammarAccess.getSemanticDomainAccessAccess().getFieldAssignment_3_2(), "rule__SemanticDomainAccess__FieldAssignment_3_2");
			builder.put(grammarAccess.getConclusionAccess().getFromAssignment_0(), "rule__Conclusion__FromAssignment_0");
			builder.put(grammarAccess.getConclusionAccess().getTerminationAssignment_2(), "rule__Conclusion__TerminationAssignment_2");
			builder.put(grammarAccess.getConclusionAccess().getToAssignment_3(), "rule__Conclusion__ToAssignment_3");
			builder.put(grammarAccess.getPremiseAccess().getFromAssignment_0(), "rule__Premise__FromAssignment_0");
			builder.put(grammarAccess.getPremiseAccess().getTerminationAssignment_2(), "rule__Premise__TerminationAssignment_2");
			builder.put(grammarAccess.getPremiseAccess().getToAssignment_3(), "rule__Premise__ToAssignment_3");
			builder.put(grammarAccess.getDefConfigurationAccess().getConceptAssignment_0(), "rule__DefConfiguration__ConceptAssignment_0");
			builder.put(grammarAccess.getDefConfigurationAccess().getChildsAssignment_2_0(), "rule__DefConfiguration__ChildsAssignment_2_0");
			builder.put(grammarAccess.getDefConfigurationAccess().getChildsAssignment_2_1_1(), "rule__DefConfiguration__ChildsAssignment_2_1_1");
			builder.put(grammarAccess.getRefConfigurationAccess().getConceptAssignment_0(), "rule__RefConfiguration__ConceptAssignment_0");
			builder.put(grammarAccess.getRefConfigurationAccess().getChildsAssignment_2_0(), "rule__RefConfiguration__ChildsAssignment_2_0");
			builder.put(grammarAccess.getRefConfigurationAccess().getChildsAssignment_2_1_1(), "rule__RefConfiguration__ChildsAssignment_2_1_1");
			builder.put(grammarAccess.getSymbolDefAccess().getNameAssignment_1(), "rule__SymbolDef__NameAssignment_1");
			builder.put(grammarAccess.getSymbolRefAccess().getDefAssignment_1(), "rule__SymbolRef__DefAssignment_1");
			builder.put(grammarAccess.getListDefAccess().getHeadAssignment_1(), "rule__ListDef__HeadAssignment_1");
			builder.put(grammarAccess.getListDefAccess().getTailAssignment_3(), "rule__ListDef__TailAssignment_3");
			builder.put(grammarAccess.getListRefAccess().getHeadAssignment_1(), "rule__ListRef__HeadAssignment_1");
			builder.put(grammarAccess.getListRefAccess().getTailAssignment_3(), "rule__ListRef__TailAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AdaptSemGrammarAccess grammarAccess;

	@Override
	protected InternalAdaptSemParser createParser() {
		InternalAdaptSemParser result = new InternalAdaptSemParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AdaptSemGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AdaptSemGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
