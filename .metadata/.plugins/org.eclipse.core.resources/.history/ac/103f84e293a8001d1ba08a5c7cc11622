package fr.irisa.diverse.adaptivesemantics.generator

import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.And
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.BoolConstant
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Div
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.DoubleConstant
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Equal
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.IntConstant
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Less
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.LessEq
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Minus
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Mult
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Not
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.NotEqual
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Or
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Plus
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.StringConstant

abstract class ExpressionVisitor<T> {
	def T visitPlus(Plus node)
	def T visitMinus(Minus node)
	def T visitDiv(Div node)
	def T visitMult(Mult node)
	def T visitOr(Or node)
	def T visitAnd(And node)
	def T visitNot(Not node)
	def T visitLess(Less node)
	def T visitLessEq(LessEq node)
	def T visitEqual(Equal node)
	def T visitNotEqual(NotEqual node)
	def T visitIntConstant(IntConstant node)
	def T visitBoolConstant(BoolConstant node)
	def T visitStringConstant(StringConstant node)
	def T visitDoubleConstant(DoubleConstant node)
}