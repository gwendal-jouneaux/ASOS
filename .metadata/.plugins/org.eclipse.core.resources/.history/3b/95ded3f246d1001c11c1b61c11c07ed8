/**
 */
package fr.irisa.diverse.semanticadaptation.model.semanticadaptation.provider;

import fr.irisa.diverse.semanticadaptation.model.semanticadaptation.util.SemanticadaptationAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SemanticadaptationItemProviderAdapterFactory extends SemanticadaptationAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SemanticadaptationItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SemanticAdaptation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SemanticAdaptationItemProvider semanticAdaptationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SemanticAdaptation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSemanticAdaptationAdapter() {
		if (semanticAdaptationItemProvider == null) {
			semanticAdaptationItemProvider = new SemanticAdaptationItemProvider(this);
		}

		return semanticAdaptationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Import} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportItemProvider importItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Import}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportAdapter() {
		if (importItemProvider == null) {
			importItemProvider = new ImportItemProvider(this);
		}

		return importItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Rule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleItemProvider ruleItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Rule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleAdapter() {
		if (ruleItemProvider == null) {
			ruleItemProvider = new RuleItemProvider(this);
		}

		return ruleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Conclusion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConclusionItemProvider conclusionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Conclusion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConclusionAdapter() {
		if (conclusionItemProvider == null) {
			conclusionItemProvider = new ConclusionItemProvider(this);
		}

		return conclusionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SymbolDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SymbolDefItemProvider symbolDefItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SymbolDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSymbolDefAdapter() {
		if (symbolDefItemProvider == null) {
			symbolDefItemProvider = new SymbolDefItemProvider(this);
		}

		return symbolDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.DefConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefConfigurationItemProvider defConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.DefConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefConfigurationAdapter() {
		if (defConfigurationItemProvider == null) {
			defConfigurationItemProvider = new DefConfigurationItemProvider(this);
		}

		return defConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.RefConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefConfigurationItemProvider refConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.RefConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefConfigurationAdapter() {
		if (refConfigurationItemProvider == null) {
			refConfigurationItemProvider = new RefConfigurationItemProvider(this);
		}

		return refConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SymbolRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SymbolRefItemProvider symbolRefItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SymbolRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSymbolRefAdapter() {
		if (symbolRefItemProvider == null) {
			symbolRefItemProvider = new SymbolRefItemProvider(this);
		}

		return symbolRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SemanticDomainUpdate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SemanticDomainUpdateItemProvider semanticDomainUpdateItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SemanticDomainUpdate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSemanticDomainUpdateAdapter() {
		if (semanticDomainUpdateItemProvider == null) {
			semanticDomainUpdateItemProvider = new SemanticDomainUpdateItemProvider(this);
		}

		return semanticDomainUpdateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SemanticDomainAccess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SemanticDomainAccessItemProvider semanticDomainAccessItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SemanticDomainAccess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSemanticDomainAccessAdapter() {
		if (semanticDomainAccessItemProvider == null) {
			semanticDomainAccessItemProvider = new SemanticDomainAccessItemProvider(this);
		}

		return semanticDomainAccessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Premise} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PremiseItemProvider premiseItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Premise}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPremiseAdapter() {
		if (premiseItemProvider == null) {
			premiseItemProvider = new PremiseItemProvider(this);
		}

		return premiseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Semantic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SemanticItemProvider semanticItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Semantic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSemanticAdapter() {
		if (semanticItemProvider == null) {
			semanticItemProvider = new SemanticItemProvider(this);
		}

		return semanticItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (semanticAdaptationItemProvider != null)
			semanticAdaptationItemProvider.dispose();
		if (modelItemProvider != null)
			modelItemProvider.dispose();
		if (importItemProvider != null)
			importItemProvider.dispose();
		if (ruleItemProvider != null)
			ruleItemProvider.dispose();
		if (conclusionItemProvider != null)
			conclusionItemProvider.dispose();
		if (conditionItemProvider != null)
			conditionItemProvider.dispose();
		if (symbolDefItemProvider != null)
			symbolDefItemProvider.dispose();
		if (defConfigurationItemProvider != null)
			defConfigurationItemProvider.dispose();
		if (refConfigurationItemProvider != null)
			refConfigurationItemProvider.dispose();
		if (symbolRefItemProvider != null)
			symbolRefItemProvider.dispose();
		if (semanticDomainUpdateItemProvider != null)
			semanticDomainUpdateItemProvider.dispose();
		if (semanticDomainAccessItemProvider != null)
			semanticDomainAccessItemProvider.dispose();
		if (premiseItemProvider != null)
			premiseItemProvider.dispose();
		if (semanticItemProvider != null)
			semanticItemProvider.dispose();
	}

}
