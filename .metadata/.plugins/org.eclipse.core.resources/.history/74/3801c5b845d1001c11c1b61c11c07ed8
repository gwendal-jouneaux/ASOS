/**
 */
package fr.irisa.diverse.semanticadaptation.model.semanticadaptation.util;

import fr.irisa.diverse.semanticadaptation.model.semanticadaptation.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SemanticadaptationPackage
 * @generated
 */
public class SemanticadaptationAdapterFactory extends AdapterFactoryImpl {
	/**
	 * The cached model package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static SemanticadaptationPackage modelPackage;

	/**
	 * Creates an instance of the adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SemanticadaptationAdapterFactory() {
		if (modelPackage == null) {
			modelPackage = SemanticadaptationPackage.eINSTANCE;
		}
	}

	/**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc -->
	 * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
	 * <!-- end-user-doc -->
	 * @return whether this factory is applicable for the type of the object.
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object object) {
		if (object == modelPackage) {
			return true;
		}
		if (object instanceof EObject) {
			return ((EObject) object).eClass().getEPackage() == modelPackage;
		}
		return false;
	}

	/**
	 * The switch that delegates to the <code>createXXX</code> methods.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SemanticadaptationSwitch<Adapter> modelSwitch = new SemanticadaptationSwitch<Adapter>() {
		@Override
		public Adapter caseSemanticAdaptation(SemanticAdaptation object) {
			return createSemanticAdaptationAdapter();
		}

		@Override
		public Adapter caseModel(Model object) {
			return createModelAdapter();
		}

		@Override
		public Adapter caseImport(Import object) {
			return createImportAdapter();
		}

		@Override
		public Adapter caseRule(Rule object) {
			return createRuleAdapter();
		}

		@Override
		public Adapter caseConclusion(Conclusion object) {
			return createConclusionAdapter();
		}

		@Override
		public Adapter caseCondition(Condition object) {
			return createConditionAdapter();
		}

		@Override
		public Adapter caseConfiguration(Configuration object) {
			return createConfigurationAdapter();
		}

		@Override
		public Adapter caseSymbolDef(SymbolDef object) {
			return createSymbolDefAdapter();
		}

		@Override
		public Adapter caseDefConfiguration(DefConfiguration object) {
			return createDefConfigurationAdapter();
		}

		@Override
		public Adapter caseRefConfiguration(RefConfiguration object) {
			return createRefConfigurationAdapter();
		}

		@Override
		public Adapter caseSymbolRef(SymbolRef object) {
			return createSymbolRefAdapter();
		}

		@Override
		public Adapter caseSemanticDomainUpdate(SemanticDomainUpdate object) {
			return createSemanticDomainUpdateAdapter();
		}

		@Override
		public Adapter caseSemanticDomainAccess(SemanticDomainAccess object) {
			return createSemanticDomainAccessAdapter();
		}

		@Override
		public Adapter caseConclusionOutput(ConclusionOutput object) {
			return createConclusionOutputAdapter();
		}

		@Override
		public Adapter casePremise(Premise object) {
			return createPremiseAdapter();
		}

		@Override
		public Adapter caseTermDef(TermDef object) {
			return createTermDefAdapter();
		}

		@Override
		public Adapter caseTermRef(TermRef object) {
			return createTermRefAdapter();
		}

		@Override
		public Adapter caseReduction(Reduction object) {
			return createReductionAdapter();
		}

		@Override
		public Adapter caseSemantic(Semantic object) {
			return createSemanticAdapter();
		}

		@Override
		public Adapter defaultCase(EObject object) {
			return createEObjectAdapter();
		}
	};

	/**
	 * Creates an adapter for the <code>target</code>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param target the object to adapt.
	 * @return the adapter for the <code>target</code>.
	 * @generated
	 */
	@Override
	public Adapter createAdapter(Notifier target) {
		return modelSwitch.doSwitch((EObject) target);
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SemanticAdaptation <em>Semantic Adaptation</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SemanticAdaptation
	 * @generated
	 */
	public Adapter createSemanticAdaptationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Model <em>Model</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Model
	 * @generated
	 */
	public Adapter createModelAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Import <em>Import</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Import
	 * @generated
	 */
	public Adapter createImportAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Rule <em>Rule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Rule
	 * @generated
	 */
	public Adapter createRuleAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Conclusion <em>Conclusion</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Conclusion
	 * @generated
	 */
	public Adapter createConclusionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Condition <em>Condition</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Condition
	 * @generated
	 */
	public Adapter createConditionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Configuration <em>Configuration</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Configuration
	 * @generated
	 */
	public Adapter createConfigurationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SymbolDef <em>Symbol Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SymbolDef
	 * @generated
	 */
	public Adapter createSymbolDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.DefConfiguration <em>Def Configuration</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.DefConfiguration
	 * @generated
	 */
	public Adapter createDefConfigurationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.RefConfiguration <em>Ref Configuration</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.RefConfiguration
	 * @generated
	 */
	public Adapter createRefConfigurationAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SymbolRef <em>Symbol Ref</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SymbolRef
	 * @generated
	 */
	public Adapter createSymbolRefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SemanticDomainUpdate <em>Semantic Domain Update</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SemanticDomainUpdate
	 * @generated
	 */
	public Adapter createSemanticDomainUpdateAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SemanticDomainAccess <em>Semantic Domain Access</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.SemanticDomainAccess
	 * @generated
	 */
	public Adapter createSemanticDomainAccessAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.ConclusionOutput <em>Conclusion Output</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.ConclusionOutput
	 * @generated
	 */
	public Adapter createConclusionOutputAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Premise <em>Premise</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Premise
	 * @generated
	 */
	public Adapter createPremiseAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.TermDef <em>Term Def</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.TermDef
	 * @generated
	 */
	public Adapter createTermDefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.TermRef <em>Term Ref</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.TermRef
	 * @generated
	 */
	public Adapter createTermRefAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Reduction <em>Reduction</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Reduction
	 * @generated
	 */
	public Adapter createReductionAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Semantic <em>Semantic</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see fr.irisa.diverse.semanticadaptation.model.semanticadaptation.Semantic
	 * @generated
	 */
	public Adapter createSemanticAdapter() {
		return null;
	}

	/**
	 * Creates a new adapter for the default case.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @generated
	 */
	public Adapter createEObjectAdapter() {
		return null;
	}

} //SemanticadaptationAdapterFactory
