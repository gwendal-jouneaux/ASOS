grammar fr.irisa.diverse.adaptivesemantics.AdaptSem with org.eclipse.xtext.common.Terminals

import "http://www.diverse-team.fr/adaptivesemantics" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AdaptiveSemantics returns AdaptiveSemantics:
	model=Model
	imports+=Import*
	rules+=Rule*;





Model returns Model:
	'model' importURI=EString "with" semanticdomain=[ecore::EPackage|FQN];

Import returns Import:
	'import' importURI=EString "as" name=ID;

Rule returns Rule:
	'rule' name=ID ','
		conclusion=Conclusion
	('where' conditions+=Condition (';' conditions+=Condition)*)?
	('resolve' premises+=Premise (';' premises+=Premise)*)?
	('bind' bindings+=Binding (';' bindings+=Binding)*)?
	('IO' (inputs+=Input | outputs+=Output) (';' (inputs+=Input | outputs+=Output))*)?
;





Condition returns Condition:
	{Condition} cond=CondExpr
;

	


	
Input returns Input:
	assignee=Assignee "=" operation=[ecore::EOperation|OperationFQN] "(" ")"
;

Output returns Output:
	operation=[ecore::EOperation|OperationFQN] "(" 
		(args+=TermRef (","  args+=TermRef)*)? 
	")"
;
	
	
	

	
Binding returns Binding:
	assignee=Assignee "=" expr=Assignable
;



Assignable returns Assignable:
	Expr | RefConfiguration | SemanticDomainAccess
;

Assignee returns Assignee:
	SymbolDef | SemanticDomainAccess
;

//SemanticDomainAccess returns SemanticDomainAccess:
//	reciever=DomainAccessExpression "." field=EString
//;

SemanticDomainAccess returns SemanticDomainAccess:
	 reciever=TerminalAccessExpression '.' field=ID ({SemanticDomainAccess.reciever=current} '.' field=ID)*
;

TerminalAccessExpression returns DomainAccessExpression:
	SymbolRef | Self
;

Self returns Self:
	{Self} "self"
;





Conclusion returns Conclusion:
	from=DefConfiguration '->' (termination?="termination")? to=SingleTermRef
;

Premise returns Premise:
	from=SymbolRef '->' (termination?="termination")? to=SingleTermDef
;

TermDef:
	SingleTermDef | ListDef | VoidList
;

TermRef:
	SingleTermRef | ListRef | VoidList
;

SingleTermDef:
	DefConfiguration | SymbolDef
;

SingleTermRef:
	=> RefConfiguration | SymbolRef
;

	
	
	

DefConfiguration returns DefConfiguration:
	concept=[ecore::EClass|FQN] "(" 
		(childs+=TermDef ("," childs+=TermDef)*)? 
	")"
;
	
RefConfiguration returns RefConfiguration:
	concept=[ecore::EClass|FQN] "(" 
		(childs+=TermRef ("," childs+=TermRef)*)? 
	")"
;

SymbolDef returns SymbolDef:
	{SymbolDef}
	name=ID
;

SymbolRef returns SymbolRef:
	{SymbolRef}
	def=[SymbolDef]
;

ListDef returns ListDef:
	"[" head=SingleTermDef "|" tail=SymbolDef "]"
;

ListRef returns ListRef:
	"[" head=SymbolRef "|" tail=SymbolRef "]"
;

VoidList returns VoidList:
	{VoidList} "[]"
;





CondExpr returns CondExpr:
	CondOr | CondAnd | CondEquality | CondComparison | CondNot
;

CondNot returns CondExpr:
	{Not} "!" expr=Expr
;

CondOr returns CondExpr:
	{Or} lhs=And "||" rhs=And
;


CondAnd returns CondExpr:
	{And} lhs=Equality "&&" rhs=Equality
;

CondEquality returns CondExpr:
	({Equal} lhs=Comparison '==' rhs=Comparison) | 
	({NotEqual} lhs=Comparison '!=' rhs=Comparison)
;

CondComparison returns CondExpr:
	({Less} lhs=PlusOrMinus '<' rhs=PlusOrMinus) | 
	({LessEq} lhs=PlusOrMinus '<=' rhs=PlusOrMinus)
;

Expr returns Expr:
	Or
;

Or returns Expr:
	And (
		{Or.lhs=current} "||" rhs=And
	)*;

And returns Expr:
	Equality (
		{And.lhs=current} "&&" rhs=Equality
	)*;

Equality returns Expr:
	Comparison (
		({Equal.lhs=current} '==' | {NotEqual.lhs=current} '!=')
		rhs=Comparison
	)*;

Comparison returns Expr:
	PlusOrMinus (
		({Less.lhs=current} '<' | {LessEq.lhs=current} '<=')
		rhs=PlusOrMinus
	)*;

PlusOrMinus returns Expr:
	MulOrDiv (
		({Plus.lhs=current} '+' | {Minus.lhs=current} '-')
		rhs=MulOrDiv
	)*;

MulOrDiv returns Expr:
	Primary (
		({Mult.lhs=current} '*' | {Div.lhs=current} '/')
		rhs=Primary
	)*;

Primary returns Expr:
	'(' Expr ')' |
	{Not} "!" expr=Primary |
	Atomic;

Atomic returns Expr:
	{IntConstant} value=INTEGER |
	{DoubleConstant} value=DOUBLE |
	{StringConstant} value=STRING |
	{BoolConstant} value=BOOL | 
	SemanticDomainAccess | 
	TerminalAccessExpression;

terminal BOOL returns ecore::EBoolean: ('true' | 'false');
terminal DOUBLE returns ecore::EDouble: "-"? ('0'..'9')+"."('0'..'9')+;
terminal INTEGER returns ecore::EInt: "-"? ('0'..'9')+;





EString returns ecore::EString:
	STRING | ID;
	
FQN: ID ("." ID)*;

OperationFQN: ID ("." ID)+;


	
	
	

	
	
	