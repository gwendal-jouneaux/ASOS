grammar fr.irisa.diverse.adaptivesemantics.AdaptSem with org.eclipse.xtext.common.Terminals

import "http://www.diverse-team.fr/adaptivesemantics" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AdaptiveSemantics returns AdaptiveSemantics:
	model=Model
	imports+=Import*
	rules+=Rule*;





Model returns Model:
	'model' importURI=EString "with" semanticdomain=[ecore::EPackage|FQN];

Import returns Import:
	'import' importURI=EString "as" name=ID;

Rule returns Rule:
	'rule' name=ID ','
		conclusion=Conclusion
	('where' conditions+=Condition*)?
	('resolve' premises+=Premise*)?
	('bind' bindings+=Binding*)?
	;





Condition returns Condition:
	{Condition}
	oclPredicate=EString;
	
	
	
	
	
Binding returns Binding:
	NameBinding | SemanticDomainUpdate
;

NameBinding returns NameBinding:
	symbol=SymbolDef "=" oclExpression=EString
;





Conclusion returns Conclusion:
	from=DefConfiguration '->' (termination?="termination")? to=SingleTermRef
;

Premise returns Premise:
	from=SingleTermRef '->' (termination?="termination")? to=SingleTermDef
;

TermDef:
	SingleTermDef | ListDef
;

TermRef:
	SingleTermRef | ListRef
;

SingleTermDef:
	DefConfiguration | SymbolDef
;

SingleTermRef:
	RefConfiguration | SymbolRef | SemanticDomainAccess
;

	
	
	

DefConfiguration returns DefConfiguration:
	concept=[ecore::EClass|FQN]
	"("
		(childs+=TermDef ("," childs+=TermDef)*)?
	")"
;
	
RefConfiguration returns RefConfiguration:
	concept=[ecore::EClass|FQN] "("
		(childs+=TermRef ("," childs+=TermRef)*)?
	")"
;

SymbolDef returns SymbolDef:
	{SymbolDef}
	name=ID
;

SymbolRef returns SymbolRef:
	{SymbolRef}
	def=[SymbolDef]
;

ListDef returns ListDef:
	"[" head=SymbolDef "|" tail=SymbolDef "]"
;

ListRef returns ListRef:
	"[" head=SymbolRef "|" tail=SymbolRef "]"
;





SemanticDomainAccess returns SemanticDomainAccess:
	path=[ecore::EStructuralFeature|AttributeFQN]
;

SemanticDomainUpdate returns SemanticDomainUpdate:
	path=[ecore::EStructuralFeature|AttributeFQN] "=" oclExpression=EString
;





EString returns ecore::EString:
	STRING | ID;
	
FQN: ID ("." ID)*;

AttributeFQN: ID ("." ID)+;


	
	
	
	
	
	
	