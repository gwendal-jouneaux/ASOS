/*
 * generated by Xtext 2.25.0
 */
package fr.irisa.diverse.semanticadaptation.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.irisa.diverse.semanticadaptation.ide.contentassist.antlr.internal.InternalSemAdaptParser;
import fr.irisa.diverse.semanticadaptation.services.SemAdaptGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SemAdaptParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SemAdaptGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SemAdaptGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAdaptationAccess().getAlternatives_0(), "rule__Adaptation__Alternatives_0");
			builder.put(grammarAccess.getRuleAccess().getAlternatives_4_1(), "rule__Rule__Alternatives_4_1");
			builder.put(grammarAccess.getRuleAccess().getAlternatives_4_2_1(), "rule__Rule__Alternatives_4_2_1");
			builder.put(grammarAccess.getConclusionOutputAccess().getAlternatives(), "rule__ConclusionOutput__Alternatives");
			builder.put(grammarAccess.getTermDefAccess().getAlternatives(), "rule__TermDef__Alternatives");
			builder.put(grammarAccess.getTermRefAccess().getAlternatives(), "rule__TermRef__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getSemanticAdaptationAccess().getGroup(), "rule__SemanticAdaptation__Group__0");
			builder.put(grammarAccess.getSemanticsAccess().getGroup(), "rule__Semantics__Group__0");
			builder.put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
			builder.put(grammarAccess.getPointcutAccess().getGroup(), "rule__Pointcut__Group__0");
			builder.put(grammarAccess.getPointcutAccess().getGroup_2(), "rule__Pointcut__Group_2__0");
			builder.put(grammarAccess.getPointcutAccess().getGroup_2_2(), "rule__Pointcut__Group_2_2__0");
			builder.put(grammarAccess.getAdaptationAccess().getGroup(), "rule__Adaptation__Group__0");
			builder.put(grammarAccess.getAdaptationAccess().getGroup_0_0(), "rule__Adaptation__Group_0_0__0");
			builder.put(grammarAccess.getAdaptationAccess().getGroup_0_1(), "rule__Adaptation__Group_0_1__0");
			builder.put(grammarAccess.getAdaptationAccess().getGroup_0_2(), "rule__Adaptation__Group_0_2__0");
			builder.put(grammarAccess.getAdaptiveSemanticsAccess().getGroup(), "rule__AdaptiveSemantics__Group__0");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_4(), "rule__Rule__Group_4__0");
			builder.put(grammarAccess.getRuleAccess().getGroup_4_2(), "rule__Rule__Group_4_2__0");
			builder.put(grammarAccess.getConclusionAccess().getGroup(), "rule__Conclusion__Group__0");
			builder.put(grammarAccess.getPremiseAccess().getGroup(), "rule__Premise__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getDefConfigurationAccess().getGroup(), "rule__DefConfiguration__Group__0");
			builder.put(grammarAccess.getDefConfigurationAccess().getGroup_2(), "rule__DefConfiguration__Group_2__0");
			builder.put(grammarAccess.getDefConfigurationAccess().getGroup_2_1(), "rule__DefConfiguration__Group_2_1__0");
			builder.put(grammarAccess.getRefConfigurationAccess().getGroup(), "rule__RefConfiguration__Group__0");
			builder.put(grammarAccess.getRefConfigurationAccess().getGroup_2(), "rule__RefConfiguration__Group_2__0");
			builder.put(grammarAccess.getRefConfigurationAccess().getGroup_2_1(), "rule__RefConfiguration__Group_2_1__0");
			builder.put(grammarAccess.getSymbolDefAccess().getGroup(), "rule__SymbolDef__Group__0");
			builder.put(grammarAccess.getSymbolRefAccess().getGroup(), "rule__SymbolRef__Group__0");
			builder.put(grammarAccess.getListDefAccess().getGroup(), "rule__ListDef__Group__0");
			builder.put(grammarAccess.getListRefAccess().getGroup(), "rule__ListRef__Group__0");
			builder.put(grammarAccess.getListAppendAccess().getGroup(), "rule__ListAppend__Group__0");
			builder.put(grammarAccess.getSemanticDomainUpdateAccess().getGroup(), "rule__SemanticDomainUpdate__Group__0");
			builder.put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
			builder.put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
			builder.put(grammarAccess.getAttributeFQNAccess().getGroup(), "rule__AttributeFQN__Group__0");
			builder.put(grammarAccess.getAttributeFQNAccess().getGroup_1(), "rule__AttributeFQN__Group_1__0");
			builder.put(grammarAccess.getSemanticAdaptationAccess().getModelAssignment_0(), "rule__SemanticAdaptation__ModelAssignment_0");
			builder.put(grammarAccess.getSemanticAdaptationAccess().getSemanticsAssignment_1(), "rule__SemanticAdaptation__SemanticsAssignment_1");
			builder.put(grammarAccess.getSemanticAdaptationAccess().getImportsAssignment_2(), "rule__SemanticAdaptation__ImportsAssignment_2");
			builder.put(grammarAccess.getSemanticAdaptationAccess().getModulesAssignment_3(), "rule__SemanticAdaptation__ModulesAssignment_3");
			builder.put(grammarAccess.getSemanticsAccess().getImportURIAssignment_1(), "rule__Semantics__ImportURIAssignment_1");
			builder.put(grammarAccess.getModuleAccess().getRecursiveAssignment_0(), "rule__Module__RecursiveAssignment_0");
			builder.put(grammarAccess.getModuleAccess().getNameAssignment_1(), "rule__Module__NameAssignment_1");
			builder.put(grammarAccess.getModuleAccess().getPointcutsAssignment_3(), "rule__Module__PointcutsAssignment_3");
			builder.put(grammarAccess.getModuleAccess().getAdaptationsAssignment_4(), "rule__Module__AdaptationsAssignment_4");
			builder.put(grammarAccess.getPointcutAccess().getStructureAssignment_1(), "rule__Pointcut__StructureAssignment_1");
			builder.put(grammarAccess.getPointcutAccess().getConditionsAssignment_2_1(), "rule__Pointcut__ConditionsAssignment_2_1");
			builder.put(grammarAccess.getPointcutAccess().getConditionsAssignment_2_2_1(), "rule__Pointcut__ConditionsAssignment_2_2_1");
			builder.put(grammarAccess.getAdaptationAccess().getTargetAssignment_1(), "rule__Adaptation__TargetAssignment_1");
			builder.put(grammarAccess.getAdaptationAccess().getAdaptationAssignment_2(), "rule__Adaptation__AdaptationAssignment_2");
			builder.put(grammarAccess.getAdaptiveSemanticsAccess().getModelAssignment_0(), "rule__AdaptiveSemantics__ModelAssignment_0");
			builder.put(grammarAccess.getAdaptiveSemanticsAccess().getImportsAssignment_1(), "rule__AdaptiveSemantics__ImportsAssignment_1");
			builder.put(grammarAccess.getAdaptiveSemanticsAccess().getRulesAssignment_2(), "rule__AdaptiveSemantics__RulesAssignment_2");
			builder.put(grammarAccess.getModelAccess().getImportURIAssignment_1(), "rule__Model__ImportURIAssignment_1");
			builder.put(grammarAccess.getImportAccess().getImportURIAssignment_1(), "rule__Import__ImportURIAssignment_1");
			builder.put(grammarAccess.getImportAccess().getNameAssignment_3(), "rule__Import__NameAssignment_3");
			builder.put(grammarAccess.getRuleAccess().getNameAssignment_1(), "rule__Rule__NameAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getConclusionAssignment_3(), "rule__Rule__ConclusionAssignment_3");
			builder.put(grammarAccess.getRuleAccess().getPremisesAssignment_4_1_0(), "rule__Rule__PremisesAssignment_4_1_0");
			builder.put(grammarAccess.getRuleAccess().getConditionsAssignment_4_1_1(), "rule__Rule__ConditionsAssignment_4_1_1");
			builder.put(grammarAccess.getRuleAccess().getPremisesAssignment_4_2_1_0(), "rule__Rule__PremisesAssignment_4_2_1_0");
			builder.put(grammarAccess.getRuleAccess().getConditionsAssignment_4_2_1_1(), "rule__Rule__ConditionsAssignment_4_2_1_1");
			builder.put(grammarAccess.getConclusionAccess().getFromAssignment_0(), "rule__Conclusion__FromAssignment_0");
			builder.put(grammarAccess.getConclusionAccess().getToAssignment_2(), "rule__Conclusion__ToAssignment_2");
			builder.put(grammarAccess.getPremiseAccess().getFromAssignment_0(), "rule__Premise__FromAssignment_0");
			builder.put(grammarAccess.getPremiseAccess().getToAssignment_2(), "rule__Premise__ToAssignment_2");
			builder.put(grammarAccess.getConditionAccess().getOclPredicateAssignment_1(), "rule__Condition__OclPredicateAssignment_1");
			builder.put(grammarAccess.getDefConfigurationAccess().getConceptAssignment_0(), "rule__DefConfiguration__ConceptAssignment_0");
			builder.put(grammarAccess.getDefConfigurationAccess().getChildsAssignment_2_0(), "rule__DefConfiguration__ChildsAssignment_2_0");
			builder.put(grammarAccess.getDefConfigurationAccess().getChildsAssignment_2_1_1(), "rule__DefConfiguration__ChildsAssignment_2_1_1");
			builder.put(grammarAccess.getRefConfigurationAccess().getConceptAssignment_0(), "rule__RefConfiguration__ConceptAssignment_0");
			builder.put(grammarAccess.getRefConfigurationAccess().getChildsAssignment_2_0(), "rule__RefConfiguration__ChildsAssignment_2_0");
			builder.put(grammarAccess.getRefConfigurationAccess().getChildsAssignment_2_1_1(), "rule__RefConfiguration__ChildsAssignment_2_1_1");
			builder.put(grammarAccess.getSymbolDefAccess().getNameAssignment_1(), "rule__SymbolDef__NameAssignment_1");
			builder.put(grammarAccess.getSymbolRefAccess().getDefAssignment_1(), "rule__SymbolRef__DefAssignment_1");
			builder.put(grammarAccess.getListDefAccess().getHeadAssignment_1(), "rule__ListDef__HeadAssignment_1");
			builder.put(grammarAccess.getListDefAccess().getTailAssignment_3(), "rule__ListDef__TailAssignment_3");
			builder.put(grammarAccess.getListRefAccess().getHeadAssignment_1(), "rule__ListRef__HeadAssignment_1");
			builder.put(grammarAccess.getListRefAccess().getTailAssignment_3(), "rule__ListRef__TailAssignment_3");
			builder.put(grammarAccess.getListAppendAccess().getHeadAssignment_1(), "rule__ListAppend__HeadAssignment_1");
			builder.put(grammarAccess.getListAppendAccess().getTailAssignment_3(), "rule__ListAppend__TailAssignment_3");
			builder.put(grammarAccess.getSemanticDomainAccessAccess().getPathAssignment(), "rule__SemanticDomainAccess__PathAssignment");
			builder.put(grammarAccess.getSemanticDomainUpdateAccess().getPathAssignment_0(), "rule__SemanticDomainUpdate__PathAssignment_0");
			builder.put(grammarAccess.getSemanticDomainUpdateAccess().getValueAssignment_2(), "rule__SemanticDomainUpdate__ValueAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SemAdaptGrammarAccess grammarAccess;

	@Override
	protected InternalSemAdaptParser createParser() {
		InternalSemAdaptParser result = new InternalSemAdaptParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SemAdaptGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SemAdaptGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
