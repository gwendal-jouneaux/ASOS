/**
 */
package fr.irisa.diverse.semanticadaptation.model.semanticadaptation.impl;

import fr.irisa.diverse.semanticadaptation.model.semanticadaptation.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SemanticadaptationFactoryImpl extends EFactoryImpl implements SemanticadaptationFactory {
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static SemanticadaptationFactory init() {
		try {
			SemanticadaptationFactory theSemanticadaptationFactory = (SemanticadaptationFactory) EPackage.Registry.INSTANCE
					.getEFactory(SemanticadaptationPackage.eNS_URI);
			if (theSemanticadaptationFactory != null) {
				return theSemanticadaptationFactory;
			}
		} catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new SemanticadaptationFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SemanticadaptationFactoryImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EObject create(EClass eClass) {
		switch (eClass.getClassifierID()) {
		case SemanticadaptationPackage.SEMANTIC_ADAPTATION:
			return createSemanticAdaptation();
		case SemanticadaptationPackage.MODEL:
			return createModel();
		case SemanticadaptationPackage.IMPORT:
			return createImport();
		case SemanticadaptationPackage.RULE:
			return createRule();
		case SemanticadaptationPackage.CONCLUSION:
			return createConclusion();
		case SemanticadaptationPackage.CONDITION:
			return createCondition();
		case SemanticadaptationPackage.SYMBOL_DEF:
			return createSymbolDef();
		case SemanticadaptationPackage.DEF_CONFIGURATION:
			return createDefConfiguration();
		case SemanticadaptationPackage.REF_CONFIGURATION:
			return createRefConfiguration();
		case SemanticadaptationPackage.SYMBOL_REF:
			return createSymbolRef();
		case SemanticadaptationPackage.SEMANTIC_DOMAIN_UPDATE:
			return createSemanticDomainUpdate();
		case SemanticadaptationPackage.SEMANTIC_DOMAIN_ACCESS:
			return createSemanticDomainAccess();
		case SemanticadaptationPackage.PREMISE:
			return createPremise();
		case SemanticadaptationPackage.SEMANTIC:
			return createSemantic();
		default:
			throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object createFromString(EDataType eDataType, String initialValue) {
		switch (eDataType.getClassifierID()) {
		case SemanticadaptationPackage.ADAPTATION_TYPE:
			return createAdaptationTypeFromString(eDataType, initialValue);
		default:
			throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String convertToString(EDataType eDataType, Object instanceValue) {
		switch (eDataType.getClassifierID()) {
		case SemanticadaptationPackage.ADAPTATION_TYPE:
			return convertAdaptationTypeToString(eDataType, instanceValue);
		default:
			throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SemanticAdaptation createSemanticAdaptation() {
		SemanticAdaptationImpl semanticAdaptation = new SemanticAdaptationImpl();
		return semanticAdaptation;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Model createModel() {
		ModelImpl model = new ModelImpl();
		return model;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Import createImport() {
		ImportImpl import_ = new ImportImpl();
		return import_;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Rule createRule() {
		RuleImpl rule = new RuleImpl();
		return rule;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Conclusion createConclusion() {
		ConclusionImpl conclusion = new ConclusionImpl();
		return conclusion;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Condition createCondition() {
		ConditionImpl condition = new ConditionImpl();
		return condition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SymbolDef createSymbolDef() {
		SymbolDefImpl symbolDef = new SymbolDefImpl();
		return symbolDef;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DefConfiguration createDefConfiguration() {
		DefConfigurationImpl defConfiguration = new DefConfigurationImpl();
		return defConfiguration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RefConfiguration createRefConfiguration() {
		RefConfigurationImpl refConfiguration = new RefConfigurationImpl();
		return refConfiguration;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SymbolRef createSymbolRef() {
		SymbolRefImpl symbolRef = new SymbolRefImpl();
		return symbolRef;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SemanticDomainUpdate createSemanticDomainUpdate() {
		SemanticDomainUpdateImpl semanticDomainUpdate = new SemanticDomainUpdateImpl();
		return semanticDomainUpdate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SemanticDomainAccess createSemanticDomainAccess() {
		SemanticDomainAccessImpl semanticDomainAccess = new SemanticDomainAccessImpl();
		return semanticDomainAccess;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Premise createPremise() {
		PremiseImpl premise = new PremiseImpl();
		return premise;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Semantic createSemantic() {
		SemanticImpl semantic = new SemanticImpl();
		return semantic;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AdaptationType createAdaptationTypeFromString(EDataType eDataType, String initialValue) {
		AdaptationType result = AdaptationType.get(initialValue);
		if (result == null)
			throw new IllegalArgumentException(
					"The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertAdaptationTypeToString(EDataType eDataType, Object instanceValue) {
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SemanticadaptationPackage getSemanticadaptationPackage() {
		return (SemanticadaptationPackage) getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
	@Deprecated
	public static SemanticadaptationPackage getPackage() {
		return SemanticadaptationPackage.eINSTANCE;
	}

} //SemanticadaptationFactoryImpl
