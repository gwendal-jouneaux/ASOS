/*
 * generated by Xtext 2.25.0
 */
package fr.irisa.diverse.adaptivesemantics.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AdaptSemGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AdaptiveSemanticsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.AdaptiveSemantics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModelModelParserRuleCall_0_0 = (RuleCall)cModelAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cRulesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRulesRuleParserRuleCall_2_0 = (RuleCall)cRulesAssignment_2.eContents().get(0);
		
		//AdaptiveSemantics returns AdaptiveSemantics:
		//    model=Model
		//    imports+=Import*
		//    rules+=Rule*;
		@Override public ParserRule getRule() { return rule; }
		
		//model=Model
		//imports+=Import*
		//rules+=Rule*
		public Group getGroup() { return cGroup; }
		
		//model=Model
		public Assignment getModelAssignment_0() { return cModelAssignment_0; }
		
		//Model
		public RuleCall getModelModelParserRuleCall_0_0() { return cModelModelParserRuleCall_0_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }
		
		//rules+=Rule*
		public Assignment getRulesAssignment_2() { return cRulesAssignment_2; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_2_0() { return cRulesRuleParserRuleCall_2_0; }
	}
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURIEStringParserRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Model returns Model:
		//    'model' importURI=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'model' importURI=EString
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//importURI=EString
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//EString
		public RuleCall getImportURIEStringParserRuleCall_1_0() { return cImportURIEStringParserRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURIEStringParserRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Import returns Import:
		//    'import' importURI=EString "as" name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importURI=EString "as" name=ID
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importURI=EString
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//EString
		public RuleCall getImportURIEStringParserRuleCall_1_0() { return cImportURIEStringParserRuleCall_1_0; }
		
		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConclusionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConclusionConclusionParserRuleCall_3_0 = (RuleCall)cConclusionAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWhereKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cPremisesAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cPremisesPremiseParserRuleCall_4_1_0_0 = (RuleCall)cPremisesAssignment_4_1_0.eContents().get(0);
		private final Assignment cConditionsAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_4_1_1_0 = (RuleCall)cConditionsAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Alternatives cAlternatives_4_2_1 = (Alternatives)cGroup_4_2.eContents().get(1);
		private final Assignment cPremisesAssignment_4_2_1_0 = (Assignment)cAlternatives_4_2_1.eContents().get(0);
		private final RuleCall cPremisesPremiseParserRuleCall_4_2_1_0_0 = (RuleCall)cPremisesAssignment_4_2_1_0.eContents().get(0);
		private final Assignment cConditionsAssignment_4_2_1_1 = (Assignment)cAlternatives_4_2_1.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_4_2_1_1_0 = (RuleCall)cConditionsAssignment_4_2_1_1.eContents().get(0);
		
		//Rule returns Rule:
		//    'rule' name=ID ','
		//        conclusion=Conclusion
		//    ('where'
		//        (premises+=Premise | conditions+=Condition)
		//        ("," (premises+=Premise | conditions+=Condition))* )?
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'rule' name=ID ','
		//    conclusion=Conclusion
		//('where'
		//    (premises+=Premise | conditions+=Condition)
		//    ("," (premises+=Premise | conditions+=Condition))* )?
		public Group getGroup() { return cGroup; }
		
		//'rule'
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//conclusion=Conclusion
		public Assignment getConclusionAssignment_3() { return cConclusionAssignment_3; }
		
		//Conclusion
		public RuleCall getConclusionConclusionParserRuleCall_3_0() { return cConclusionConclusionParserRuleCall_3_0; }
		
		//('where'
		//    (premises+=Premise | conditions+=Condition)
		//    ("," (premises+=Premise | conditions+=Condition))* )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'where'
		public Keyword getWhereKeyword_4_0() { return cWhereKeyword_4_0; }
		
		//(premises+=Premise | conditions+=Condition)
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//premises+=Premise
		public Assignment getPremisesAssignment_4_1_0() { return cPremisesAssignment_4_1_0; }
		
		//Premise
		public RuleCall getPremisesPremiseParserRuleCall_4_1_0_0() { return cPremisesPremiseParserRuleCall_4_1_0_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_4_1_1() { return cConditionsAssignment_4_1_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_4_1_1_0() { return cConditionsConditionParserRuleCall_4_1_1_0; }
		
		//("," (premises+=Premise | conditions+=Condition))*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//(premises+=Premise | conditions+=Condition)
		public Alternatives getAlternatives_4_2_1() { return cAlternatives_4_2_1; }
		
		//premises+=Premise
		public Assignment getPremisesAssignment_4_2_1_0() { return cPremisesAssignment_4_2_1_0; }
		
		//Premise
		public RuleCall getPremisesPremiseParserRuleCall_4_2_1_0_0() { return cPremisesPremiseParserRuleCall_4_2_1_0_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_4_2_1_1() { return cConditionsAssignment_4_2_1_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_4_2_1_1_0() { return cConditionsConditionParserRuleCall_4_2_1_1_0; }
	}
	public class ConclusionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.Conclusion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromDefConfigurationParserRuleCall_0_0 = (RuleCall)cFromAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToConclusionOutputParserRuleCall_2_0 = (RuleCall)cToAssignment_2.eContents().get(0);
		
		//Conclusion returns Conclusion:
		//    from=DefConfiguration '->' to=ConclusionOutput
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//from=DefConfiguration '->' to=ConclusionOutput
		public Group getGroup() { return cGroup; }
		
		//from=DefConfiguration
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }
		
		//DefConfiguration
		public RuleCall getFromDefConfigurationParserRuleCall_0_0() { return cFromDefConfigurationParserRuleCall_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//to=ConclusionOutput
		public Assignment getToAssignment_2() { return cToAssignment_2; }
		
		//ConclusionOutput
		public RuleCall getToConclusionOutputParserRuleCall_2_0() { return cToConclusionOutputParserRuleCall_2_0; }
	}
	public class ConclusionOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.ConclusionOutput");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTermRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSemanticDomainUpdateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSemanticDomainAccessParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ConclusionOutput returns ConclusionOutput:
		//     TermRef | SemanticDomainUpdate | SemanticDomainAccess
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//TermRef | SemanticDomainUpdate | SemanticDomainAccess
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TermRef
		public RuleCall getTermRefParserRuleCall_0() { return cTermRefParserRuleCall_0; }
		
		//SemanticDomainUpdate
		public RuleCall getSemanticDomainUpdateParserRuleCall_1() { return cSemanticDomainUpdateParserRuleCall_1; }
		
		//SemanticDomainAccess
		public RuleCall getSemanticDomainAccessParserRuleCall_2() { return cSemanticDomainAccessParserRuleCall_2; }
	}
	public class PremiseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.Premise");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromTermRefParserRuleCall_0_0 = (RuleCall)cFromAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToTermDefParserRuleCall_2_0 = (RuleCall)cToAssignment_2.eContents().get(0);
		
		//Premise returns Premise:
		//    from=TermRef '->' to=TermDef
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//from=TermRef '->' to=TermDef
		public Group getGroup() { return cGroup; }
		
		//from=TermRef
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }
		
		//TermRef
		public RuleCall getFromTermRefParserRuleCall_0_0() { return cFromTermRefParserRuleCall_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//to=TermDef
		public Assignment getToAssignment_2() { return cToAssignment_2; }
		
		//TermDef
		public RuleCall getToTermDefParserRuleCall_2_0() { return cToTermDefParserRuleCall_2_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOclPredicateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOclPredicateEStringParserRuleCall_1_0 = (RuleCall)cOclPredicateAssignment_1.eContents().get(0);
		
		//Condition returns Condition:
		//    {Condition}
		//    oclPredicate=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Condition}
		//oclPredicate=EString
		public Group getGroup() { return cGroup; }
		
		//{Condition}
		public Action getConditionAction_0() { return cConditionAction_0; }
		
		//oclPredicate=EString
		public Assignment getOclPredicateAssignment_1() { return cOclPredicateAssignment_1; }
		
		//EString
		public RuleCall getOclPredicateEStringParserRuleCall_1_0() { return cOclPredicateEStringParserRuleCall_1_0; }
	}
	public class DefConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.DefConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConceptAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cConceptEClassifierCrossReference_0_0 = (CrossReference)cConceptAssignment_0.eContents().get(0);
		private final RuleCall cConceptEClassifierFQNParserRuleCall_0_0_1 = (RuleCall)cConceptEClassifierCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cChildsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cChildsTermDefParserRuleCall_2_0_0 = (RuleCall)cChildsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cChildsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cChildsTermDefParserRuleCall_2_1_1_0 = (RuleCall)cChildsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DefConfiguration returns DefConfiguration:
		//    concept=[ecore::EClassifier|FQN]
		//    "("
		//        (childs+=TermDef ("," childs+=TermDef)*)?
		//    ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//concept=[ecore::EClassifier|FQN]
		//"("
		//    (childs+=TermDef ("," childs+=TermDef)*)?
		//")"
		public Group getGroup() { return cGroup; }
		
		//concept=[ecore::EClassifier|FQN]
		public Assignment getConceptAssignment_0() { return cConceptAssignment_0; }
		
		//[ecore::EClassifier|FQN]
		public CrossReference getConceptEClassifierCrossReference_0_0() { return cConceptEClassifierCrossReference_0_0; }
		
		//FQN
		public RuleCall getConceptEClassifierFQNParserRuleCall_0_0_1() { return cConceptEClassifierFQNParserRuleCall_0_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(childs+=TermDef ("," childs+=TermDef)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//childs+=TermDef
		public Assignment getChildsAssignment_2_0() { return cChildsAssignment_2_0; }
		
		//TermDef
		public RuleCall getChildsTermDefParserRuleCall_2_0_0() { return cChildsTermDefParserRuleCall_2_0_0; }
		
		//("," childs+=TermDef)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//childs+=TermDef
		public Assignment getChildsAssignment_2_1_1() { return cChildsAssignment_2_1_1; }
		
		//TermDef
		public RuleCall getChildsTermDefParserRuleCall_2_1_1_0() { return cChildsTermDefParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RefConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.RefConfiguration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConceptAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cConceptEClassifierCrossReference_0_0 = (CrossReference)cConceptAssignment_0.eContents().get(0);
		private final RuleCall cConceptEClassifierFQNParserRuleCall_0_0_1 = (RuleCall)cConceptEClassifierCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cChildsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cChildsTermRefParserRuleCall_2_0_0 = (RuleCall)cChildsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cChildsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cChildsTermRefParserRuleCall_2_1_1_0 = (RuleCall)cChildsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RefConfiguration returns RefConfiguration:
		//    concept=[ecore::EClassifier|FQN] "("
		//        (childs+=TermRef ("," childs+=TermRef)*)?
		//    ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//concept=[ecore::EClassifier|FQN] "("
		//    (childs+=TermRef ("," childs+=TermRef)*)?
		//")"
		public Group getGroup() { return cGroup; }
		
		//concept=[ecore::EClassifier|FQN]
		public Assignment getConceptAssignment_0() { return cConceptAssignment_0; }
		
		//[ecore::EClassifier|FQN]
		public CrossReference getConceptEClassifierCrossReference_0_0() { return cConceptEClassifierCrossReference_0_0; }
		
		//FQN
		public RuleCall getConceptEClassifierFQNParserRuleCall_0_0_1() { return cConceptEClassifierFQNParserRuleCall_0_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(childs+=TermRef ("," childs+=TermRef)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//childs+=TermRef
		public Assignment getChildsAssignment_2_0() { return cChildsAssignment_2_0; }
		
		//TermRef
		public RuleCall getChildsTermRefParserRuleCall_2_0_0() { return cChildsTermRefParserRuleCall_2_0_0; }
		
		//("," childs+=TermRef)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//childs+=TermRef
		public Assignment getChildsAssignment_2_1_1() { return cChildsAssignment_2_1_1; }
		
		//TermRef
		public RuleCall getChildsTermRefParserRuleCall_2_1_1_0() { return cChildsTermRefParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SymbolDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.SymbolDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSymbolDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SymbolDef returns SymbolDef:
		//    {SymbolDef}
		//    name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SymbolDef}
		//name=ID
		public Group getGroup() { return cGroup; }
		
		//{SymbolDef}
		public Action getSymbolDefAction_0() { return cSymbolDefAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SymbolRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.SymbolRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSymbolRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDefSymbolDefCrossReference_1_0 = (CrossReference)cDefAssignment_1.eContents().get(0);
		private final RuleCall cDefSymbolDefIDTerminalRuleCall_1_0_1 = (RuleCall)cDefSymbolDefCrossReference_1_0.eContents().get(1);
		
		//SymbolRef returns SymbolRef:
		//    {SymbolRef}
		//    def=[SymbolDef]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SymbolRef}
		//def=[SymbolDef]
		public Group getGroup() { return cGroup; }
		
		//{SymbolRef}
		public Action getSymbolRefAction_0() { return cSymbolRefAction_0; }
		
		//def=[SymbolDef]
		public Assignment getDefAssignment_1() { return cDefAssignment_1; }
		
		//[SymbolDef]
		public CrossReference getDefSymbolDefCrossReference_1_0() { return cDefSymbolDefCrossReference_1_0; }
		
		//ID
		public RuleCall getDefSymbolDefIDTerminalRuleCall_1_0_1() { return cDefSymbolDefIDTerminalRuleCall_1_0_1; }
	}
	public class TermDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.TermDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSymbolDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefConfigurationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TermDef returns TermDef:
		//    SymbolDef | DefConfiguration | ListDef
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SymbolDef | DefConfiguration | ListDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SymbolDef
		public RuleCall getSymbolDefParserRuleCall_0() { return cSymbolDefParserRuleCall_0; }
		
		//DefConfiguration
		public RuleCall getDefConfigurationParserRuleCall_1() { return cDefConfigurationParserRuleCall_1; }
		
		//ListDef
		public RuleCall getListDefParserRuleCall_2() { return cListDefParserRuleCall_2; }
	}
	public class TermRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.TermRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSymbolRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRefConfigurationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cListRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cListAppendParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TermRef returns TermRef:
		//    SymbolRef | RefConfiguration | ListRef | ListAppend
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SymbolRef | RefConfiguration | ListRef | ListAppend
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SymbolRef
		public RuleCall getSymbolRefParserRuleCall_0() { return cSymbolRefParserRuleCall_0; }
		
		//RefConfiguration
		public RuleCall getRefConfigurationParserRuleCall_1() { return cRefConfigurationParserRuleCall_1; }
		
		//ListRef
		public RuleCall getListRefParserRuleCall_2() { return cListRefParserRuleCall_2; }
		
		//ListAppend
		public RuleCall getListAppendParserRuleCall_3() { return cListAppendParserRuleCall_3; }
	}
	public class ListDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.ListDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeadAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadSymbolDefParserRuleCall_1_0 = (RuleCall)cHeadAssignment_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTailAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTailSymbolDefParserRuleCall_3_0 = (RuleCall)cTailAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListDef returns ListDef:
		//    "[" head=SymbolDef "|" tail=SymbolDef "]"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" head=SymbolDef "|" tail=SymbolDef "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//head=SymbolDef
		public Assignment getHeadAssignment_1() { return cHeadAssignment_1; }
		
		//SymbolDef
		public RuleCall getHeadSymbolDefParserRuleCall_1_0() { return cHeadSymbolDefParserRuleCall_1_0; }
		
		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
		
		//tail=SymbolDef
		public Assignment getTailAssignment_3() { return cTailAssignment_3; }
		
		//SymbolDef
		public RuleCall getTailSymbolDefParserRuleCall_3_0() { return cTailSymbolDefParserRuleCall_3_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ListRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.ListRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cHeadAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cHeadSymbolRefParserRuleCall_1_0 = (RuleCall)cHeadAssignment_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTailAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTailSymbolRefParserRuleCall_3_0 = (RuleCall)cTailAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListRef returns ListRef:
		//    "[" head=SymbolRef "|" tail=SymbolRef "]"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" head=SymbolRef "|" tail=SymbolRef "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//head=SymbolRef
		public Assignment getHeadAssignment_1() { return cHeadAssignment_1; }
		
		//SymbolRef
		public RuleCall getHeadSymbolRefParserRuleCall_1_0() { return cHeadSymbolRefParserRuleCall_1_0; }
		
		//"|"
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
		
		//tail=SymbolRef
		public Assignment getTailAssignment_3() { return cTailAssignment_3; }
		
		//SymbolRef
		public RuleCall getTailSymbolRefParserRuleCall_3_0() { return cTailSymbolRefParserRuleCall_3_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ListAppendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.ListAppend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsTermRefParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPlusSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsTermRefParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ListAppend returns ListAppend:
		//    "[" elements+=TermRef ("+" elements+=TermRef)* "]"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" elements+=TermRef ("+" elements+=TermRef)* "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//elements+=TermRef
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//TermRef
		public RuleCall getElementsTermRefParserRuleCall_1_0() { return cElementsTermRefParserRuleCall_1_0; }
		
		//("+" elements+=TermRef)*
		public Group getGroup_2() { return cGroup_2; }
		
		//"+"
		public Keyword getPlusSignKeyword_2_0() { return cPlusSignKeyword_2_0; }
		
		//elements+=TermRef
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }
		
		//TermRef
		public RuleCall getElementsTermRefParserRuleCall_2_1_0() { return cElementsTermRefParserRuleCall_2_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class SemanticDomainAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.SemanticDomainAccess");
		private final Assignment cPathAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cPathEStructuralFeatureCrossReference_0 = (CrossReference)cPathAssignment.eContents().get(0);
		private final RuleCall cPathEStructuralFeatureAttributeFQNParserRuleCall_0_1 = (RuleCall)cPathEStructuralFeatureCrossReference_0.eContents().get(1);
		
		//SemanticDomainAccess returns SemanticDomainAccess:
		//    path=[ecore::EStructuralFeature|AttributeFQN]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//path=[ecore::EStructuralFeature|AttributeFQN]
		public Assignment getPathAssignment() { return cPathAssignment; }
		
		//[ecore::EStructuralFeature|AttributeFQN]
		public CrossReference getPathEStructuralFeatureCrossReference_0() { return cPathEStructuralFeatureCrossReference_0; }
		
		//AttributeFQN
		public RuleCall getPathEStructuralFeatureAttributeFQNParserRuleCall_0_1() { return cPathEStructuralFeatureAttributeFQNParserRuleCall_0_1; }
	}
	public class SemanticDomainUpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.SemanticDomainUpdate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPathEStructuralFeatureCrossReference_0_0 = (CrossReference)cPathAssignment_0.eContents().get(0);
		private final RuleCall cPathEStructuralFeatureAttributeFQNParserRuleCall_0_0_1 = (RuleCall)cPathEStructuralFeatureCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueTermRefParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SemanticDomainUpdate returns SemanticDomainUpdate:
		//    path=[ecore::EStructuralFeature|AttributeFQN] "=" value=TermRef
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//path=[ecore::EStructuralFeature|AttributeFQN] "=" value=TermRef
		public Group getGroup() { return cGroup; }
		
		//path=[ecore::EStructuralFeature|AttributeFQN]
		public Assignment getPathAssignment_0() { return cPathAssignment_0; }
		
		//[ecore::EStructuralFeature|AttributeFQN]
		public CrossReference getPathEStructuralFeatureCrossReference_0_0() { return cPathEStructuralFeatureCrossReference_0_0; }
		
		//AttributeFQN
		public RuleCall getPathEStructuralFeatureAttributeFQNParserRuleCall_0_0_1() { return cPathEStructuralFeatureAttributeFQNParserRuleCall_0_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=TermRef
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//TermRef
		public RuleCall getValueTermRefParserRuleCall_2_0() { return cValueTermRefParserRuleCall_2_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN: ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class AttributeFQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.adaptivesemantics.AdaptSem.AttributeFQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//AttributeFQN: ID ("." ID)+;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)+
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("." ID)+
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final AdaptiveSemanticsElements pAdaptiveSemantics;
	private final ModelElements pModel;
	private final ImportElements pImport;
	private final RuleElements pRule;
	private final ConclusionElements pConclusion;
	private final ConclusionOutputElements pConclusionOutput;
	private final PremiseElements pPremise;
	private final ConditionElements pCondition;
	private final DefConfigurationElements pDefConfiguration;
	private final RefConfigurationElements pRefConfiguration;
	private final SymbolDefElements pSymbolDef;
	private final SymbolRefElements pSymbolRef;
	private final TermDefElements pTermDef;
	private final TermRefElements pTermRef;
	private final ListDefElements pListDef;
	private final ListRefElements pListRef;
	private final ListAppendElements pListAppend;
	private final SemanticDomainAccessElements pSemanticDomainAccess;
	private final SemanticDomainUpdateElements pSemanticDomainUpdate;
	private final EStringElements pEString;
	private final FQNElements pFQN;
	private final AttributeFQNElements pAttributeFQN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AdaptSemGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAdaptiveSemantics = new AdaptiveSemanticsElements();
		this.pModel = new ModelElements();
		this.pImport = new ImportElements();
		this.pRule = new RuleElements();
		this.pConclusion = new ConclusionElements();
		this.pConclusionOutput = new ConclusionOutputElements();
		this.pPremise = new PremiseElements();
		this.pCondition = new ConditionElements();
		this.pDefConfiguration = new DefConfigurationElements();
		this.pRefConfiguration = new RefConfigurationElements();
		this.pSymbolDef = new SymbolDefElements();
		this.pSymbolRef = new SymbolRefElements();
		this.pTermDef = new TermDefElements();
		this.pTermRef = new TermRefElements();
		this.pListDef = new ListDefElements();
		this.pListRef = new ListRefElements();
		this.pListAppend = new ListAppendElements();
		this.pSemanticDomainAccess = new SemanticDomainAccessElements();
		this.pSemanticDomainUpdate = new SemanticDomainUpdateElements();
		this.pEString = new EStringElements();
		this.pFQN = new FQNElements();
		this.pAttributeFQN = new AttributeFQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.irisa.diverse.adaptivesemantics.AdaptSem".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//AdaptiveSemantics returns AdaptiveSemantics:
	//    model=Model
	//    imports+=Import*
	//    rules+=Rule*;
	public AdaptiveSemanticsElements getAdaptiveSemanticsAccess() {
		return pAdaptiveSemantics;
	}
	
	public ParserRule getAdaptiveSemanticsRule() {
		return getAdaptiveSemanticsAccess().getRule();
	}
	
	//Model returns Model:
	//    'model' importURI=EString;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Import returns Import:
	//    'import' importURI=EString "as" name=ID;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Rule returns Rule:
	//    'rule' name=ID ','
	//        conclusion=Conclusion
	//    ('where'
	//        (premises+=Premise | conditions+=Condition)
	//        ("," (premises+=Premise | conditions+=Condition))* )?
	//    ;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Conclusion returns Conclusion:
	//    from=DefConfiguration '->' to=ConclusionOutput
	//;
	public ConclusionElements getConclusionAccess() {
		return pConclusion;
	}
	
	public ParserRule getConclusionRule() {
		return getConclusionAccess().getRule();
	}
	
	//ConclusionOutput returns ConclusionOutput:
	//     TermRef | SemanticDomainUpdate | SemanticDomainAccess
	//;
	public ConclusionOutputElements getConclusionOutputAccess() {
		return pConclusionOutput;
	}
	
	public ParserRule getConclusionOutputRule() {
		return getConclusionOutputAccess().getRule();
	}
	
	//Premise returns Premise:
	//    from=TermRef '->' to=TermDef
	//;
	public PremiseElements getPremiseAccess() {
		return pPremise;
	}
	
	public ParserRule getPremiseRule() {
		return getPremiseAccess().getRule();
	}
	
	//Condition returns Condition:
	//    {Condition}
	//    oclPredicate=EString;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//DefConfiguration returns DefConfiguration:
	//    concept=[ecore::EClassifier|FQN]
	//    "("
	//        (childs+=TermDef ("," childs+=TermDef)*)?
	//    ")"
	//;
	public DefConfigurationElements getDefConfigurationAccess() {
		return pDefConfiguration;
	}
	
	public ParserRule getDefConfigurationRule() {
		return getDefConfigurationAccess().getRule();
	}
	
	//RefConfiguration returns RefConfiguration:
	//    concept=[ecore::EClassifier|FQN] "("
	//        (childs+=TermRef ("," childs+=TermRef)*)?
	//    ")"
	//;
	public RefConfigurationElements getRefConfigurationAccess() {
		return pRefConfiguration;
	}
	
	public ParserRule getRefConfigurationRule() {
		return getRefConfigurationAccess().getRule();
	}
	
	//SymbolDef returns SymbolDef:
	//    {SymbolDef}
	//    name=ID
	//;
	public SymbolDefElements getSymbolDefAccess() {
		return pSymbolDef;
	}
	
	public ParserRule getSymbolDefRule() {
		return getSymbolDefAccess().getRule();
	}
	
	//SymbolRef returns SymbolRef:
	//    {SymbolRef}
	//    def=[SymbolDef]
	//;
	public SymbolRefElements getSymbolRefAccess() {
		return pSymbolRef;
	}
	
	public ParserRule getSymbolRefRule() {
		return getSymbolRefAccess().getRule();
	}
	
	//TermDef returns TermDef:
	//    SymbolDef | DefConfiguration | ListDef
	//;
	public TermDefElements getTermDefAccess() {
		return pTermDef;
	}
	
	public ParserRule getTermDefRule() {
		return getTermDefAccess().getRule();
	}
	
	//TermRef returns TermRef:
	//    SymbolRef | RefConfiguration | ListRef | ListAppend
	//;
	public TermRefElements getTermRefAccess() {
		return pTermRef;
	}
	
	public ParserRule getTermRefRule() {
		return getTermRefAccess().getRule();
	}
	
	//ListDef returns ListDef:
	//    "[" head=SymbolDef "|" tail=SymbolDef "]"
	//;
	public ListDefElements getListDefAccess() {
		return pListDef;
	}
	
	public ParserRule getListDefRule() {
		return getListDefAccess().getRule();
	}
	
	//ListRef returns ListRef:
	//    "[" head=SymbolRef "|" tail=SymbolRef "]"
	//;
	public ListRefElements getListRefAccess() {
		return pListRef;
	}
	
	public ParserRule getListRefRule() {
		return getListRefAccess().getRule();
	}
	
	//ListAppend returns ListAppend:
	//    "[" elements+=TermRef ("+" elements+=TermRef)* "]"
	//;
	public ListAppendElements getListAppendAccess() {
		return pListAppend;
	}
	
	public ParserRule getListAppendRule() {
		return getListAppendAccess().getRule();
	}
	
	//SemanticDomainAccess returns SemanticDomainAccess:
	//    path=[ecore::EStructuralFeature|AttributeFQN]
	//;
	public SemanticDomainAccessElements getSemanticDomainAccessAccess() {
		return pSemanticDomainAccess;
	}
	
	public ParserRule getSemanticDomainAccessRule() {
		return getSemanticDomainAccessAccess().getRule();
	}
	
	//SemanticDomainUpdate returns SemanticDomainUpdate:
	//    path=[ecore::EStructuralFeature|AttributeFQN] "=" value=TermRef
	//;
	public SemanticDomainUpdateElements getSemanticDomainUpdateAccess() {
		return pSemanticDomainUpdate;
	}
	
	public ParserRule getSemanticDomainUpdateRule() {
		return getSemanticDomainUpdateAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//FQN: ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//AttributeFQN: ID ("." ID)+;
	public AttributeFQNElements getAttributeFQNAccess() {
		return pAttributeFQN;
	}
	
	public ParserRule getAttributeFQNRule() {
		return getAttributeFQNAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
