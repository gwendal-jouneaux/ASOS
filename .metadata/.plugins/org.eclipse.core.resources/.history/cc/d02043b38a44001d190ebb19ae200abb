/*
 * generated by Xtext 2.25.0
 */
package fr.irisa.diverse.semanticadaptation.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.irisa.diverse.adaptivesemantics.services.AdaptSemGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SemAdaptGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SemanticAdaptationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.semanticadaptation.SemAdapt.SemanticAdaptation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModelModelParserRuleCall_0_0 = (RuleCall)cModelAssignment_0.eContents().get(0);
		private final Assignment cSemanticsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSemanticsSemanticsParserRuleCall_1_0 = (RuleCall)cSemanticsAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cModulesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModulesModuleParserRuleCall_3_0 = (RuleCall)cModulesAssignment_3.eContents().get(0);
		
		//SemanticAdaptation returns SemanticAdaptation:
		//    model=Model
		//    semantics=Semantics
		//    imports+=Import*
		//    modules+=Module*;
		@Override public ParserRule getRule() { return rule; }
		
		//model=Model
		//semantics=Semantics
		//imports+=Import*
		//modules+=Module*
		public Group getGroup() { return cGroup; }
		
		//model=Model
		public Assignment getModelAssignment_0() { return cModelAssignment_0; }
		
		//Model
		public RuleCall getModelModelParserRuleCall_0_0() { return cModelModelParserRuleCall_0_0; }
		
		//semantics=Semantics
		public Assignment getSemanticsAssignment_1() { return cSemanticsAssignment_1; }
		
		//Semantics
		public RuleCall getSemanticsSemanticsParserRuleCall_1_0() { return cSemanticsSemanticsParserRuleCall_1_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }
		
		//modules+=Module*
		public Assignment getModulesAssignment_3() { return cModulesAssignment_3; }
		
		//Module
		public RuleCall getModulesModuleParserRuleCall_3_0() { return cModulesModuleParserRuleCall_3_0; }
	}
	public class SemanticsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.semanticadaptation.SemAdapt.Semantics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSemanticsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURIEStringParserRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//Semantics returns Semantics:
		//    'semantics' importURI=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//'semantics' importURI=EString
		public Group getGroup() { return cGroup; }
		
		//'semantics'
		public Keyword getSemanticsKeyword_0() { return cSemanticsKeyword_0; }
		
		//importURI=EString
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }
		
		//EString
		public RuleCall getImportURIEStringParserRuleCall_1_0() { return cImportURIEStringParserRuleCall_1_0; }
	}
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.semanticadaptation.SemAdapt.Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRecursiveAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cRecursiveRecursiveKeyword_0_0 = (Keyword)cRecursiveAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPointcutsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPointcutsPointcutParserRuleCall_3_0 = (RuleCall)cPointcutsAssignment_3.eContents().get(0);
		private final Assignment cAdaptationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAdaptationsAdaptationParserRuleCall_4_0 = (RuleCall)cAdaptationsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Module returns Module:
		//    (recursive?='recursive')? name=ID
		//    "{"
		//        (pointcuts+=Pointcut)*
		//        (adaptations+=Adaptation)*
		//    "}"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(recursive?='recursive')? name=ID
		//"{"
		//    (pointcuts+=Pointcut)*
		//    (adaptations+=Adaptation)*
		//"}"
		public Group getGroup() { return cGroup; }
		
		//(recursive?='recursive')?
		public Assignment getRecursiveAssignment_0() { return cRecursiveAssignment_0; }
		
		//'recursive'
		public Keyword getRecursiveRecursiveKeyword_0_0() { return cRecursiveRecursiveKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(pointcuts+=Pointcut)*
		public Assignment getPointcutsAssignment_3() { return cPointcutsAssignment_3; }
		
		//Pointcut
		public RuleCall getPointcutsPointcutParserRuleCall_3_0() { return cPointcutsPointcutParserRuleCall_3_0; }
		
		//(adaptations+=Adaptation)*
		public Assignment getAdaptationsAssignment_4() { return cAdaptationsAssignment_4; }
		
		//Adaptation
		public RuleCall getAdaptationsAdaptationParserRuleCall_4_0() { return cAdaptationsAdaptationParserRuleCall_4_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PointcutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.semanticadaptation.SemAdapt.Pointcut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStructureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructureDefConfigurationParserRuleCall_1_0 = (RuleCall)cStructureAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWhereKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConditionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_2_1_0 = (RuleCall)cConditionsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cConditionsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_2_2_1_0 = (RuleCall)cConditionsAssignment_2_2_1.eContents().get(0);
		
		//Pointcut returns Pointcut:
		//    'match' structure=DefConfiguration
		//    ('where' conditions+=Condition ( "," conditions+=Condition)* )?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'match' structure=DefConfiguration
		//('where' conditions+=Condition ( "," conditions+=Condition)* )?
		public Group getGroup() { return cGroup; }
		
		//'match'
		public Keyword getMatchKeyword_0() { return cMatchKeyword_0; }
		
		//structure=DefConfiguration
		public Assignment getStructureAssignment_1() { return cStructureAssignment_1; }
		
		//DefConfiguration
		public RuleCall getStructureDefConfigurationParserRuleCall_1_0() { return cStructureDefConfigurationParserRuleCall_1_0; }
		
		//('where' conditions+=Condition ( "," conditions+=Condition)* )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'where'
		public Keyword getWhereKeyword_2_0() { return cWhereKeyword_2_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_2_1() { return cConditionsAssignment_2_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_2_1_0() { return cConditionsConditionParserRuleCall_2_1_0; }
		
		//( "," conditions+=Condition)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_2_2_1() { return cConditionsAssignment_2_2_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_2_2_1_0() { return cConditionsConditionParserRuleCall_2_2_1_0; }
	}
	public class AdaptationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.irisa.diverse.semanticadaptation.SemAdapt.Adaptation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Action cSpecializationAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cSpecializationKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Action cBeforeAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Keyword cBeforeKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Action cAfterAction_0_2_0 = (Action)cGroup_0_2.eContents().get(0);
		private final Keyword cAfterKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetRuleCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetRuleIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetRuleCrossReference_1_0.eContents().get(1);
		private final Assignment cAdaptationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAdaptationRuleParserRuleCall_2_0 = (RuleCall)cAdaptationAssignment_2.eContents().get(0);
		
		//Adaptation returns Adaptation:
		//    ({Specialization} "Specialization" |
		//    {Before} "Before" |
		//    {After} "After")
		//    target=[adaptivesemantics::Rule] adaptation=Rule;
		@Override public ParserRule getRule() { return rule; }
		
		//({Specialization} "Specialization" |
		//{Before} "Before" |
		//{After} "After")
		//target=[adaptivesemantics::Rule] adaptation=Rule
		public Group getGroup() { return cGroup; }
		
		//({Specialization} "Specialization" |
		//{Before} "Before" |
		//{After} "After")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//{Specialization} "Specialization"
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{Specialization}
		public Action getSpecializationAction_0_0_0() { return cSpecializationAction_0_0_0; }
		
		//"Specialization"
		public Keyword getSpecializationKeyword_0_0_1() { return cSpecializationKeyword_0_0_1; }
		
		//{Before} "Before"
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{Before}
		public Action getBeforeAction_0_1_0() { return cBeforeAction_0_1_0; }
		
		//"Before"
		public Keyword getBeforeKeyword_0_1_1() { return cBeforeKeyword_0_1_1; }
		
		//{After} "After"
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//{After}
		public Action getAfterAction_0_2_0() { return cAfterAction_0_2_0; }
		
		//"After"
		public Keyword getAfterKeyword_0_2_1() { return cAfterKeyword_0_2_1; }
		
		//target=[adaptivesemantics::Rule]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[adaptivesemantics::Rule]
		public CrossReference getTargetRuleCrossReference_1_0() { return cTargetRuleCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetRuleIDTerminalRuleCall_1_0_1() { return cTargetRuleIDTerminalRuleCall_1_0_1; }
		
		//adaptation=Rule
		public Assignment getAdaptationAssignment_2() { return cAdaptationAssignment_2; }
		
		//Rule
		public RuleCall getAdaptationRuleParserRuleCall_2_0() { return cAdaptationRuleParserRuleCall_2_0; }
	}
	
	
	private final SemanticAdaptationElements pSemanticAdaptation;
	private final SemanticsElements pSemantics;
	private final ModuleElements pModule;
	private final PointcutElements pPointcut;
	private final AdaptationElements pAdaptation;
	
	private final Grammar grammar;
	
	private final AdaptSemGrammarAccess gaAdaptSem;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SemAdaptGrammarAccess(GrammarProvider grammarProvider,
			AdaptSemGrammarAccess gaAdaptSem,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaAdaptSem = gaAdaptSem;
		this.gaTerminals = gaTerminals;
		this.pSemanticAdaptation = new SemanticAdaptationElements();
		this.pSemantics = new SemanticsElements();
		this.pModule = new ModuleElements();
		this.pPointcut = new PointcutElements();
		this.pAdaptation = new AdaptationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.irisa.diverse.semanticadaptation.SemAdapt".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public AdaptSemGrammarAccess getAdaptSemGrammarAccess() {
		return gaAdaptSem;
	}
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SemanticAdaptation returns SemanticAdaptation:
	//    model=Model
	//    semantics=Semantics
	//    imports+=Import*
	//    modules+=Module*;
	public SemanticAdaptationElements getSemanticAdaptationAccess() {
		return pSemanticAdaptation;
	}
	
	public ParserRule getSemanticAdaptationRule() {
		return getSemanticAdaptationAccess().getRule();
	}
	
	//Semantics returns Semantics:
	//    'semantics' importURI=EString;
	public SemanticsElements getSemanticsAccess() {
		return pSemantics;
	}
	
	public ParserRule getSemanticsRule() {
		return getSemanticsAccess().getRule();
	}
	
	//Module returns Module:
	//    (recursive?='recursive')? name=ID
	//    "{"
	//        (pointcuts+=Pointcut)*
	//        (adaptations+=Adaptation)*
	//    "}"
	//;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//Pointcut returns Pointcut:
	//    'match' structure=DefConfiguration
	//    ('where' conditions+=Condition ( "," conditions+=Condition)* )?
	//;
	public PointcutElements getPointcutAccess() {
		return pPointcut;
	}
	
	public ParserRule getPointcutRule() {
		return getPointcutAccess().getRule();
	}
	
	//Adaptation returns Adaptation:
	//    ({Specialization} "Specialization" |
	//    {Before} "Before" |
	//    {After} "After")
	//    target=[adaptivesemantics::Rule] adaptation=Rule;
	public AdaptationElements getAdaptationAccess() {
		return pAdaptation;
	}
	
	public ParserRule getAdaptationRule() {
		return getAdaptationAccess().getRule();
	}
	
	//AdaptiveSemantics returns AdaptiveSemantics:
	//    model=Model
	//    imports+=Import*
	//    rules+=Rule*;
	public AdaptSemGrammarAccess.AdaptiveSemanticsElements getAdaptiveSemanticsAccess() {
		return gaAdaptSem.getAdaptiveSemanticsAccess();
	}
	
	public ParserRule getAdaptiveSemanticsRule() {
		return getAdaptiveSemanticsAccess().getRule();
	}
	
	//Model returns Model:
	//    'model' importURI=EString;
	public AdaptSemGrammarAccess.ModelElements getModelAccess() {
		return gaAdaptSem.getModelAccess();
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Import returns Import:
	//    'import' importURI=EString "as" name=ID;
	public AdaptSemGrammarAccess.ImportElements getImportAccess() {
		return gaAdaptSem.getImportAccess();
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Rule returns Rule:
	//    'rule' name=ID ','
	//        conclusion=Conclusion
	//    ('where'
	//        (premises+=Premise | conditions+=Condition)
	//        ("," (premises+=Premise | conditions+=Condition))* )?
	//    ;
	public AdaptSemGrammarAccess.RuleElements getRuleAccess() {
		return gaAdaptSem.getRuleAccess();
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Conclusion returns Conclusion:
	//    from=DefConfiguration '->' to=ConclusionOutput
	//;
	public AdaptSemGrammarAccess.ConclusionElements getConclusionAccess() {
		return gaAdaptSem.getConclusionAccess();
	}
	
	public ParserRule getConclusionRule() {
		return getConclusionAccess().getRule();
	}
	
	//ConclusionOutput returns ConclusionOutput:
	//     TermRef | SemanticDomainUpdate | SemanticDomainAccess
	//;
	public AdaptSemGrammarAccess.ConclusionOutputElements getConclusionOutputAccess() {
		return gaAdaptSem.getConclusionOutputAccess();
	}
	
	public ParserRule getConclusionOutputRule() {
		return getConclusionOutputAccess().getRule();
	}
	
	//Premise returns Premise:
	//    from=TermRef '->' to=TermDef
	//;
	public AdaptSemGrammarAccess.PremiseElements getPremiseAccess() {
		return gaAdaptSem.getPremiseAccess();
	}
	
	public ParserRule getPremiseRule() {
		return getPremiseAccess().getRule();
	}
	
	//Condition returns Condition:
	//    {Condition}
	//    oclPredicate=EString;
	public AdaptSemGrammarAccess.ConditionElements getConditionAccess() {
		return gaAdaptSem.getConditionAccess();
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//DefConfiguration returns DefConfiguration:
	//    concept=[ecore::EClassifier|FQN]
	//    "("
	//        (childs+=TermDef ("," childs+=TermDef)*)?
	//    ")"
	//;
	public AdaptSemGrammarAccess.DefConfigurationElements getDefConfigurationAccess() {
		return gaAdaptSem.getDefConfigurationAccess();
	}
	
	public ParserRule getDefConfigurationRule() {
		return getDefConfigurationAccess().getRule();
	}
	
	//RefConfiguration returns RefConfiguration:
	//    concept=[ecore::EClassifier|FQN] "("
	//        (childs+=TermRef ("," childs+=TermRef)*)?
	//    ")"
	//;
	public AdaptSemGrammarAccess.RefConfigurationElements getRefConfigurationAccess() {
		return gaAdaptSem.getRefConfigurationAccess();
	}
	
	public ParserRule getRefConfigurationRule() {
		return getRefConfigurationAccess().getRule();
	}
	
	//SymbolDef returns SymbolDef:
	//    {SymbolDef}
	//    name=ID
	//;
	public AdaptSemGrammarAccess.SymbolDefElements getSymbolDefAccess() {
		return gaAdaptSem.getSymbolDefAccess();
	}
	
	public ParserRule getSymbolDefRule() {
		return getSymbolDefAccess().getRule();
	}
	
	//SymbolRef returns SymbolRef:
	//    {SymbolRef}
	//    def=[SymbolDef]
	//;
	public AdaptSemGrammarAccess.SymbolRefElements getSymbolRefAccess() {
		return gaAdaptSem.getSymbolRefAccess();
	}
	
	public ParserRule getSymbolRefRule() {
		return getSymbolRefAccess().getRule();
	}
	
	//TermDef returns TermDef:
	//    SymbolDef | DefConfiguration | ListDef
	//;
	public AdaptSemGrammarAccess.TermDefElements getTermDefAccess() {
		return gaAdaptSem.getTermDefAccess();
	}
	
	public ParserRule getTermDefRule() {
		return getTermDefAccess().getRule();
	}
	
	//TermRef returns TermRef:
	//    SymbolRef | RefConfiguration | ListRef | ListAppend
	//;
	public AdaptSemGrammarAccess.TermRefElements getTermRefAccess() {
		return gaAdaptSem.getTermRefAccess();
	}
	
	public ParserRule getTermRefRule() {
		return getTermRefAccess().getRule();
	}
	
	//ListDef returns ListDef:
	//    "[" head=SymbolDef "|" tail=SymbolDef "]"
	//;
	public AdaptSemGrammarAccess.ListDefElements getListDefAccess() {
		return gaAdaptSem.getListDefAccess();
	}
	
	public ParserRule getListDefRule() {
		return getListDefAccess().getRule();
	}
	
	//ListRef returns ListRef:
	//    "[" head=SymbolRef "|" tail=SymbolRef "]"
	//;
	public AdaptSemGrammarAccess.ListRefElements getListRefAccess() {
		return gaAdaptSem.getListRefAccess();
	}
	
	public ParserRule getListRefRule() {
		return getListRefAccess().getRule();
	}
	
	//ListAppend returns ListAppend:
	//    "[" elements+=TermRef ("+" elements+=TermRef)* "]"
	//;
	public AdaptSemGrammarAccess.ListAppendElements getListAppendAccess() {
		return gaAdaptSem.getListAppendAccess();
	}
	
	public ParserRule getListAppendRule() {
		return getListAppendAccess().getRule();
	}
	
	//SemanticDomainAccess returns SemanticDomainAccess:
	//    path=[ecore::EStructuralFeature|AttributeFQN]
	//;
	public AdaptSemGrammarAccess.SemanticDomainAccessElements getSemanticDomainAccessAccess() {
		return gaAdaptSem.getSemanticDomainAccessAccess();
	}
	
	public ParserRule getSemanticDomainAccessRule() {
		return getSemanticDomainAccessAccess().getRule();
	}
	
	//SemanticDomainUpdate returns SemanticDomainUpdate:
	//    path=[ecore::EStructuralFeature|AttributeFQN] "=" value=TermRef
	//;
	public AdaptSemGrammarAccess.SemanticDomainUpdateElements getSemanticDomainUpdateAccess() {
		return gaAdaptSem.getSemanticDomainUpdateAccess();
	}
	
	public ParserRule getSemanticDomainUpdateRule() {
		return getSemanticDomainUpdateAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public AdaptSemGrammarAccess.EStringElements getEStringAccess() {
		return gaAdaptSem.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//FQN: ID ("." ID)*;
	public AdaptSemGrammarAccess.FQNElements getFQNAccess() {
		return gaAdaptSem.getFQNAccess();
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//AttributeFQN: ID ("." ID)+;
	public AdaptSemGrammarAccess.AttributeFQNElements getAttributeFQNAccess() {
		return gaAdaptSem.getAttributeFQNAccess();
	}
	
	public ParserRule getAttributeFQNRule() {
		return getAttributeFQNAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
