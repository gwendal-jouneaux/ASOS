/*
 * generated by Xtext 2.25.0
 */
package fr.irisa.diverse.adaptivesemantics.generator

import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Rule
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.DefConfiguration

class AdaptSemGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val rulesByConcept = resource.allContents
			.filter(Rule)
			.groupBy[conclusion.from.concept]
			
		for (concept : rulesByConcept.keySet) {
			val conceptName = concept.name
			val rules = rulesByConcept.get(concept);
			rules.sort([Rule r1, Rule r2 | compareRules(r1, r2)])
			
			fsa.generateFile('test.txt', rules.map[name].join(", "))
		}
				
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
	}
	
	def int compareRules(Rule r1, Rule r2){
		for(var index = 0; index < r1.conclusion.from.childs.length; index++){
			val child1 = r1.conclusion.from.childs.get(index)
			val child2 = r2.conclusion.from.childs.get(index)
			if(child1 instanceof DefConfiguration){
				if(!(child2 instanceof DefConfiguration)){
					return 1
				}
			} else {
				if(child2 instanceof DefConfiguration){
					return -1
				}
			}
		}
		return 0
	}
}
