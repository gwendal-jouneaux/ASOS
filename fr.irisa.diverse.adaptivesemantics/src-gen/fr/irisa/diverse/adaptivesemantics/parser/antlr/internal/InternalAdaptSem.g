/*
 * generated by Xtext 2.25.0
 */
grammar InternalAdaptSem;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package fr.irisa.diverse.adaptivesemantics.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.irisa.diverse.adaptivesemantics.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.irisa.diverse.adaptivesemantics.services.AdaptSemGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private AdaptSemGrammarAccess grammarAccess;

    public InternalAdaptSemParser(TokenStream input, AdaptSemGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "AdaptiveSemantics";
   	}

   	@Override
   	protected AdaptSemGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAdaptiveSemantics
entryRuleAdaptiveSemantics returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdaptiveSemanticsRule()); }
	iv_ruleAdaptiveSemantics=ruleAdaptiveSemantics
	{ $current=$iv_ruleAdaptiveSemantics.current; }
	EOF;

// Rule AdaptiveSemantics
ruleAdaptiveSemantics returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAdaptiveSemanticsAccess().getModelModelParserRuleCall_0_0());
				}
				lv_model_0_0=ruleModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdaptiveSemanticsRule());
					}
					set(
						$current,
						"model",
						lv_model_0_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.Model");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAdaptiveSemanticsAccess().getImportsImportParserRuleCall_1_0());
				}
				lv_imports_1_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdaptiveSemanticsRule());
					}
					add(
						$current,
						"imports",
						lv_imports_1_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getAdaptiveSemanticsAccess().getRulesRuleParserRuleCall_2_0());
				}
				lv_rules_2_0=ruleRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAdaptiveSemanticsRule());
					}
					add(
						$current,
						"rules",
						lv_rules_2_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.Rule");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='model'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getModelKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getImportURIEStringParserRuleCall_1_0());
				}
				lv_importURI_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"importURI",
						lv_importURI_1_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='with'
		{
			newLeafNode(otherlv_2, grammarAccess.getModelAccess().getWithKeyword_2());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getModelAccess().getSemanticdomainEPackageCrossReference_3_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getImportAccess().getImportURIEStringParserRuleCall_1_0());
				}
				lv_importURI_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getImportRule());
					}
					set(
						$current,
						"importURI",
						lv_importURI_1_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='as'
		{
			newLeafNode(otherlv_2, grammarAccess.getImportAccess().getAsKeyword_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getImportAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rule'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getRuleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getConclusionConclusionParserRuleCall_3_0());
				}
				lv_conclusion_3_0=ruleConclusion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"conclusion",
						lv_conclusion_3_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.Conclusion");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='where'
			{
				newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getWhereKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleAccess().getConditionsConditionParserRuleCall_4_1_0());
					}
					lv_conditions_5_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleRule());
						}
						add(
							$current,
							"conditions",
							lv_conditions_5_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=';'
				{
					newLeafNode(otherlv_6, grammarAccess.getRuleAccess().getSemicolonKeyword_4_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRuleAccess().getConditionsConditionParserRuleCall_4_2_1_0());
						}
						lv_conditions_7_0=ruleCondition
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRuleRule());
							}
							add(
								$current,
								"conditions",
								lv_conditions_7_0,
								"fr.irisa.diverse.adaptivesemantics.AdaptSem.Condition");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_8='resolve'
			{
				newLeafNode(otherlv_8, grammarAccess.getRuleAccess().getResolveKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleAccess().getPremisesPremiseParserRuleCall_5_1_0());
					}
					lv_premises_9_0=rulePremise
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleRule());
						}
						add(
							$current,
							"premises",
							lv_premises_9_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.Premise");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_10=';'
				{
					newLeafNode(otherlv_10, grammarAccess.getRuleAccess().getSemicolonKeyword_5_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRuleAccess().getPremisesPremiseParserRuleCall_5_2_1_0());
						}
						lv_premises_11_0=rulePremise
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRuleRule());
							}
							add(
								$current,
								"premises",
								lv_premises_11_0,
								"fr.irisa.diverse.adaptivesemantics.AdaptSem.Premise");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_12='bind'
			{
				newLeafNode(otherlv_12, grammarAccess.getRuleAccess().getBindKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRuleAccess().getBindingsBindingParserRuleCall_6_1_0());
					}
					lv_bindings_13_0=ruleBinding
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRuleRule());
						}
						add(
							$current,
							"bindings",
							lv_bindings_13_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.Binding");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_14=';'
				{
					newLeafNode(otherlv_14, grammarAccess.getRuleAccess().getSemicolonKeyword_6_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRuleAccess().getBindingsBindingParserRuleCall_6_2_1_0());
						}
						lv_bindings_15_0=ruleBinding
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRuleRule());
							}
							add(
								$current,
								"bindings",
								lv_bindings_15_0,
								"fr.irisa.diverse.adaptivesemantics.AdaptSem.Binding");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_16='IO'
			{
				newLeafNode(otherlv_16, grammarAccess.getRuleAccess().getIOKeyword_7_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getRuleAccess().getInputsInputParserRuleCall_7_1_0_0());
						}
						lv_inputs_17_0=ruleInput
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRuleRule());
							}
							add(
								$current,
								"inputs",
								lv_inputs_17_0,
								"fr.irisa.diverse.adaptivesemantics.AdaptSem.Input");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getRuleAccess().getOutputsOutputParserRuleCall_7_1_1_0());
						}
						lv_outputs_18_0=ruleOutput
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRuleRule());
							}
							add(
								$current,
								"outputs",
								lv_outputs_18_0,
								"fr.irisa.diverse.adaptivesemantics.AdaptSem.Output");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			(
				otherlv_19=';'
				{
					newLeafNode(otherlv_19, grammarAccess.getRuleAccess().getSemicolonKeyword_7_2_0());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getRuleAccess().getInputsInputParserRuleCall_7_2_1_0_0());
							}
							lv_inputs_20_0=ruleInput
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getRuleRule());
								}
								add(
									$current,
									"inputs",
									lv_inputs_20_0,
									"fr.irisa.diverse.adaptivesemantics.AdaptSem.Input");
								afterParserOrEnumRuleCall();
							}
						)
					)
					    |
					(
						(
							{
								newCompositeNode(grammarAccess.getRuleAccess().getOutputsOutputParserRuleCall_7_2_1_1_0());
							}
							lv_outputs_21_0=ruleOutput
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getRuleRule());
								}
								add(
									$current,
									"outputs",
									lv_outputs_21_0,
									"fr.irisa.diverse.adaptivesemantics.AdaptSem.Output");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getConditionAccess().getConditionAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getCondCondExprParserRuleCall_1_0());
				}
				lv_cond_1_0=ruleCondExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"cond",
						lv_cond_1_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.CondExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	iv_ruleInput=ruleInput
	{ $current=$iv_ruleInput.current; }
	EOF;

// Rule Input
ruleInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getInputAccess().getAssigneeAssigneeParserRuleCall_0_0());
				}
				lv_assignee_0_0=ruleAssignee
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputRule());
					}
					set(
						$current,
						"assignee",
						lv_assignee_0_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.Assignee");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getInputAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInputRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getInputAccess().getOperationEOperationCrossReference_2_0());
				}
				ruleOperationFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getInputAccess().getLeftParenthesisKeyword_3());
		}
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getInputAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	iv_ruleOutput=ruleOutput
	{ $current=$iv_ruleOutput.current; }
	EOF;

// Rule Output
ruleOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOutputRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getOutputAccess().getOperationEOperationCrossReference_0_0());
				}
				ruleOperationFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getOutputAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getOutputAccess().getArgsTermRefParserRuleCall_2_0_0());
					}
					lv_args_2_0=ruleTermRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOutputRule());
						}
						add(
							$current,
							"args",
							lv_args_2_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.TermRef");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getOutputAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getOutputAccess().getArgsTermRefParserRuleCall_2_1_1_0());
						}
						lv_args_4_0=ruleTermRef
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOutputRule());
							}
							add(
								$current,
								"args",
								lv_args_4_0,
								"fr.irisa.diverse.adaptivesemantics.AdaptSem.TermRef");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getOutputAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleBinding
entryRuleBinding returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBindingRule()); }
	iv_ruleBinding=ruleBinding
	{ $current=$iv_ruleBinding.current; }
	EOF;

// Rule Binding
ruleBinding returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBindingAccess().getAssigneeAssigneeParserRuleCall_0_0());
				}
				lv_assignee_0_0=ruleAssignee
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBindingRule());
					}
					set(
						$current,
						"assignee",
						lv_assignee_0_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.Assignee");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getBindingAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBindingAccess().getExprAssignableParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleAssignable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBindingRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.Assignable");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAssignable
entryRuleAssignable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignableRule()); }
	iv_ruleAssignable=ruleAssignable
	{ $current=$iv_ruleAssignable.current; }
	EOF;

// Rule Assignable
ruleAssignable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAssignableAccess().getExprParserRuleCall_0());
		}
		this_Expr_0=ruleExpr
		{
			$current = $this_Expr_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAssignableAccess().getRefConfigurationParserRuleCall_1());
		}
		this_RefConfiguration_1=ruleRefConfiguration
		{
			$current = $this_RefConfiguration_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAssignableAccess().getSemanticDomainAccessParserRuleCall_2());
		}
		this_SemanticDomainAccess_2=ruleSemanticDomainAccess
		{
			$current = $this_SemanticDomainAccess_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAssignee
entryRuleAssignee returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssigneeRule()); }
	iv_ruleAssignee=ruleAssignee
	{ $current=$iv_ruleAssignee.current; }
	EOF;

// Rule Assignee
ruleAssignee returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAssigneeAccess().getSymbolDefParserRuleCall_0());
		}
		this_SymbolDef_0=ruleSymbolDef
		{
			$current = $this_SymbolDef_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAssigneeAccess().getSemanticDomainAccessParserRuleCall_1());
		}
		this_SemanticDomainAccess_1=ruleSemanticDomainAccess
		{
			$current = $this_SemanticDomainAccess_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSemanticDomainAccess
entryRuleSemanticDomainAccess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSemanticDomainAccessRule()); }
	iv_ruleSemanticDomainAccess=ruleSemanticDomainAccess
	{ $current=$iv_ruleSemanticDomainAccess.current; }
	EOF;

// Rule SemanticDomainAccess
ruleSemanticDomainAccess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSemanticDomainAccessAccess().getRecieverTerminalAccessExpressionParserRuleCall_0_0());
				}
				lv_reciever_0_0=ruleTerminalAccessExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSemanticDomainAccessRule());
					}
					set(
						$current,
						"reciever",
						lv_reciever_0_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.TerminalAccessExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getSemanticDomainAccessAccess().getFullStopKeyword_1());
		}
		(
			(
				lv_field_2_0=RULE_ID
				{
					newLeafNode(lv_field_2_0, grammarAccess.getSemanticDomainAccessAccess().getFieldIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSemanticDomainAccessRule());
					}
					setWithLastConsumed(
						$current,
						"field",
						lv_field_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getSemanticDomainAccessAccess().getSemanticDomainAccessRecieverAction_3_0(),
						$current);
				}
			)
			otherlv_4='.'
			{
				newLeafNode(otherlv_4, grammarAccess.getSemanticDomainAccessAccess().getFullStopKeyword_3_1());
			}
			(
				(
					lv_field_5_0=RULE_ID
					{
						newLeafNode(lv_field_5_0, grammarAccess.getSemanticDomainAccessAccess().getFieldIDTerminalRuleCall_3_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSemanticDomainAccessRule());
						}
						setWithLastConsumed(
							$current,
							"field",
							lv_field_5_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTerminalAccessExpression
entryRuleTerminalAccessExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminalAccessExpressionRule()); }
	iv_ruleTerminalAccessExpression=ruleTerminalAccessExpression
	{ $current=$iv_ruleTerminalAccessExpression.current; }
	EOF;

// Rule TerminalAccessExpression
ruleTerminalAccessExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTerminalAccessExpressionAccess().getSymbolRefParserRuleCall_0());
		}
		this_SymbolRef_0=ruleSymbolRef
		{
			$current = $this_SymbolRef_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTerminalAccessExpressionAccess().getSelfParserRuleCall_1());
		}
		this_Self_1=ruleSelf
		{
			$current = $this_Self_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSelf
entryRuleSelf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelfRule()); }
	iv_ruleSelf=ruleSelf
	{ $current=$iv_ruleSelf.current; }
	EOF;

// Rule Self
ruleSelf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getSelfAccess().getSelfAction_0(),
					$current);
			}
		)
		otherlv_1='self'
		{
			newLeafNode(otherlv_1, grammarAccess.getSelfAccess().getSelfKeyword_1());
		}
	)
;

// Entry rule entryRuleConclusion
entryRuleConclusion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConclusionRule()); }
	iv_ruleConclusion=ruleConclusion
	{ $current=$iv_ruleConclusion.current; }
	EOF;

// Rule Conclusion
ruleConclusion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConclusionAccess().getFromDefConfigurationParserRuleCall_0_0());
				}
				lv_from_0_0=ruleDefConfiguration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConclusionRule());
					}
					set(
						$current,
						"from",
						lv_from_0_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.DefConfiguration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getConclusionAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				lv_termination_2_0='termination'
				{
					newLeafNode(lv_termination_2_0, grammarAccess.getConclusionAccess().getTerminationTerminationKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConclusionRule());
					}
					setWithLastConsumed($current, "termination", lv_termination_2_0 != null, "termination");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getConclusionAccess().getToSingleTermRefParserRuleCall_3_0());
				}
				lv_to_3_0=ruleSingleTermRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConclusionRule());
					}
					set(
						$current,
						"to",
						lv_to_3_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.SingleTermRef");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePremise
entryRulePremise returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPremiseRule()); }
	iv_rulePremise=rulePremise
	{ $current=$iv_rulePremise.current; }
	EOF;

// Rule Premise
rulePremise returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPremiseAccess().getFromSymbolRefParserRuleCall_0_0());
				}
				lv_from_0_0=ruleSymbolRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPremiseRule());
					}
					set(
						$current,
						"from",
						lv_from_0_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.SymbolRef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getPremiseAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				lv_termination_2_0='termination'
				{
					newLeafNode(lv_termination_2_0, grammarAccess.getPremiseAccess().getTerminationTerminationKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPremiseRule());
					}
					setWithLastConsumed($current, "termination", lv_termination_2_0 != null, "termination");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getPremiseAccess().getToSingleTermDefParserRuleCall_3_0());
				}
				lv_to_3_0=ruleSingleTermDef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPremiseRule());
					}
					set(
						$current,
						"to",
						lv_to_3_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.SingleTermDef");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTermDef
entryRuleTermDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermDefRule()); }
	iv_ruleTermDef=ruleTermDef
	{ $current=$iv_ruleTermDef.current; }
	EOF;

// Rule TermDef
ruleTermDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTermDefAccess().getSingleTermDefParserRuleCall_0());
		}
		this_SingleTermDef_0=ruleSingleTermDef
		{
			$current = $this_SingleTermDef_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTermDefAccess().getListDefParserRuleCall_1());
		}
		this_ListDef_1=ruleListDef
		{
			$current = $this_ListDef_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTermDefAccess().getVoidListParserRuleCall_2());
		}
		this_VoidList_2=ruleVoidList
		{
			$current = $this_VoidList_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTermRef
entryRuleTermRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRefRule()); }
	iv_ruleTermRef=ruleTermRef
	{ $current=$iv_ruleTermRef.current; }
	EOF;

// Rule TermRef
ruleTermRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTermRefAccess().getSingleTermRefParserRuleCall_0());
		}
		this_SingleTermRef_0=ruleSingleTermRef
		{
			$current = $this_SingleTermRef_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTermRefAccess().getListRefParserRuleCall_1());
		}
		this_ListRef_1=ruleListRef
		{
			$current = $this_ListRef_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getTermRefAccess().getVoidListParserRuleCall_2());
		}
		this_VoidList_2=ruleVoidList
		{
			$current = $this_VoidList_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSingleTermDef
entryRuleSingleTermDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleTermDefRule()); }
	iv_ruleSingleTermDef=ruleSingleTermDef
	{ $current=$iv_ruleSingleTermDef.current; }
	EOF;

// Rule SingleTermDef
ruleSingleTermDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSingleTermDefAccess().getDefConfigurationParserRuleCall_0());
		}
		this_DefConfiguration_0=ruleDefConfiguration
		{
			$current = $this_DefConfiguration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSingleTermDefAccess().getSymbolDefParserRuleCall_1());
		}
		this_SymbolDef_1=ruleSymbolDef
		{
			$current = $this_SymbolDef_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSingleTermRef
entryRuleSingleTermRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleTermRefRule()); }
	iv_ruleSingleTermRef=ruleSingleTermRef
	{ $current=$iv_ruleSingleTermRef.current; }
	EOF;

// Rule SingleTermRef
ruleSingleTermRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleRefConfiguration)=>
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getSingleTermRefAccess().getRefConfigurationParserRuleCall_0());
			}
			this_RefConfiguration_0=ruleRefConfiguration
			{
				$current = $this_RefConfiguration_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSingleTermRefAccess().getSymbolRefParserRuleCall_1());
		}
		this_SymbolRef_1=ruleSymbolRef
		{
			$current = $this_SymbolRef_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDefConfiguration
entryRuleDefConfiguration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefConfigurationRule()); }
	iv_ruleDefConfiguration=ruleDefConfiguration
	{ $current=$iv_ruleDefConfiguration.current; }
	EOF;

// Rule DefConfiguration
ruleDefConfiguration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefConfigurationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getDefConfigurationAccess().getConceptEClassCrossReference_0_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getDefConfigurationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDefConfigurationAccess().getChildsTermDefParserRuleCall_2_0_0());
					}
					lv_childs_2_0=ruleTermDef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefConfigurationRule());
						}
						add(
							$current,
							"childs",
							lv_childs_2_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.TermDef");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getDefConfigurationAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDefConfigurationAccess().getChildsTermDefParserRuleCall_2_1_1_0());
						}
						lv_childs_4_0=ruleTermDef
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDefConfigurationRule());
							}
							add(
								$current,
								"childs",
								lv_childs_4_0,
								"fr.irisa.diverse.adaptivesemantics.AdaptSem.TermDef");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getDefConfigurationAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleRefConfiguration
entryRuleRefConfiguration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRefConfigurationRule()); }
	iv_ruleRefConfiguration=ruleRefConfiguration
	{ $current=$iv_ruleRefConfiguration.current; }
	EOF;

// Rule RefConfiguration
ruleRefConfiguration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRefConfigurationRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getRefConfigurationAccess().getConceptEClassCrossReference_0_0());
				}
				ruleFQN
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getRefConfigurationAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRefConfigurationAccess().getChildsTermRefParserRuleCall_2_0_0());
					}
					lv_childs_2_0=ruleTermRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRefConfigurationRule());
						}
						add(
							$current,
							"childs",
							lv_childs_2_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.TermRef");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getRefConfigurationAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getRefConfigurationAccess().getChildsTermRefParserRuleCall_2_1_1_0());
						}
						lv_childs_4_0=ruleTermRef
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getRefConfigurationRule());
							}
							add(
								$current,
								"childs",
								lv_childs_4_0,
								"fr.irisa.diverse.adaptivesemantics.AdaptSem.TermRef");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getRefConfigurationAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleSymbolDef
entryRuleSymbolDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSymbolDefRule()); }
	iv_ruleSymbolDef=ruleSymbolDef
	{ $current=$iv_ruleSymbolDef.current; }
	EOF;

// Rule SymbolDef
ruleSymbolDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getSymbolDefAccess().getSymbolDefAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSymbolDefAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSymbolDefRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleSymbolRef
entryRuleSymbolRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSymbolRefRule()); }
	iv_ruleSymbolRef=ruleSymbolRef
	{ $current=$iv_ruleSymbolRef.current; }
	EOF;

// Rule SymbolRef
ruleSymbolRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getSymbolRefAccess().getSymbolRefAction_0(),
					$current);
			}
		)
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSymbolRefRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getSymbolRefAccess().getDefSymbolDefCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleListDef
entryRuleListDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListDefRule()); }
	iv_ruleListDef=ruleListDef
	{ $current=$iv_ruleListDef.current; }
	EOF;

// Rule ListDef
ruleListDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getListDefAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListDefAccess().getHeadSingleTermDefParserRuleCall_1_0());
				}
				lv_head_1_0=ruleSingleTermDef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListDefRule());
					}
					set(
						$current,
						"head",
						lv_head_1_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.SingleTermDef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='|'
		{
			newLeafNode(otherlv_2, grammarAccess.getListDefAccess().getVerticalLineKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListDefAccess().getTailSymbolDefParserRuleCall_3_0());
				}
				lv_tail_3_0=ruleSymbolDef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListDefRule());
					}
					set(
						$current,
						"tail",
						lv_tail_3_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.SymbolDef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getListDefAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleListRef
entryRuleListRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListRefRule()); }
	iv_ruleListRef=ruleListRef
	{ $current=$iv_ruleListRef.current; }
	EOF;

// Rule ListRef
ruleListRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getListRefAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListRefAccess().getHeadSymbolRefParserRuleCall_1_0());
				}
				lv_head_1_0=ruleSymbolRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListRefRule());
					}
					set(
						$current,
						"head",
						lv_head_1_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.SymbolRef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='|'
		{
			newLeafNode(otherlv_2, grammarAccess.getListRefAccess().getVerticalLineKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListRefAccess().getTailSymbolRefParserRuleCall_3_0());
				}
				lv_tail_3_0=ruleSymbolRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListRefRule());
					}
					set(
						$current,
						"tail",
						lv_tail_3_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.SymbolRef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getListRefAccess().getRightSquareBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleVoidList
entryRuleVoidList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVoidListRule()); }
	iv_ruleVoidList=ruleVoidList
	{ $current=$iv_ruleVoidList.current; }
	EOF;

// Rule VoidList
ruleVoidList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getVoidListAccess().getVoidListAction_0(),
					$current);
			}
		)
		otherlv_1='[]'
		{
			newLeafNode(otherlv_1, grammarAccess.getVoidListAccess().getLeftSquareBracketRightSquareBracketKeyword_1());
		}
	)
;

// Entry rule entryRuleCondExpr
entryRuleCondExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCondExprRule()); }
	iv_ruleCondExpr=ruleCondExpr
	{ $current=$iv_ruleCondExpr.current; }
	EOF;

// Rule CondExpr
ruleCondExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getCondExprAccess().getCondOrParserRuleCall_0());
		}
		this_CondOr_0=ruleCondOr
		{
			$current = $this_CondOr_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getCondExprAccess().getCondAndParserRuleCall_1());
		}
		this_CondAnd_1=ruleCondAnd
		{
			$current = $this_CondAnd_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getCondExprAccess().getCondEqualityParserRuleCall_2());
		}
		this_CondEquality_2=ruleCondEquality
		{
			$current = $this_CondEquality_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getCondExprAccess().getCondComparisonParserRuleCall_3());
		}
		this_CondComparison_3=ruleCondComparison
		{
			$current = $this_CondComparison_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getCondExprAccess().getCondNotParserRuleCall_4());
		}
		this_CondNot_4=ruleCondNot
		{
			$current = $this_CondNot_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCondNot
entryRuleCondNot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCondNotRule()); }
	iv_ruleCondNot=ruleCondNot
	{ $current=$iv_ruleCondNot.current; }
	EOF;

// Rule CondNot
ruleCondNot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getCondNotAccess().getNotAction_0(),
					$current);
			}
		)
		otherlv_1='!'
		{
			newLeafNode(otherlv_1, grammarAccess.getCondNotAccess().getExclamationMarkKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCondNotAccess().getExprExprParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCondNotRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCondOr
entryRuleCondOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCondOrRule()); }
	iv_ruleCondOr=ruleCondOr
	{ $current=$iv_ruleCondOr.current; }
	EOF;

// Rule CondOr
ruleCondOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getCondOrAccess().getOrAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCondOrAccess().getLhsAndParserRuleCall_1_0());
				}
				lv_lhs_1_0=ruleAnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCondOrRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_1_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.And");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='||'
		{
			newLeafNode(otherlv_2, grammarAccess.getCondOrAccess().getVerticalLineVerticalLineKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCondOrAccess().getRhsAndParserRuleCall_3_0());
				}
				lv_rhs_3_0=ruleAnd
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCondOrRule());
					}
					set(
						$current,
						"rhs",
						lv_rhs_3_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.And");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCondAnd
entryRuleCondAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCondAndRule()); }
	iv_ruleCondAnd=ruleCondAnd
	{ $current=$iv_ruleCondAnd.current; }
	EOF;

// Rule CondAnd
ruleCondAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getCondAndAccess().getAndAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCondAndAccess().getLhsEqualityParserRuleCall_1_0());
				}
				lv_lhs_1_0=ruleEquality
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCondAndRule());
					}
					set(
						$current,
						"lhs",
						lv_lhs_1_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.Equality");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='&&'
		{
			newLeafNode(otherlv_2, grammarAccess.getCondAndAccess().getAmpersandAmpersandKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCondAndAccess().getRhsEqualityParserRuleCall_3_0());
				}
				lv_rhs_3_0=ruleEquality
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCondAndRule());
					}
					set(
						$current,
						"rhs",
						lv_rhs_3_0,
						"fr.irisa.diverse.adaptivesemantics.AdaptSem.Equality");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCondEquality
entryRuleCondEquality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCondEqualityRule()); }
	iv_ruleCondEquality=ruleCondEquality
	{ $current=$iv_ruleCondEquality.current; }
	EOF;

// Rule CondEquality
ruleCondEquality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getCondEqualityAccess().getEqualAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCondEqualityAccess().getLhsComparisonParserRuleCall_0_1_0());
					}
					lv_lhs_1_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCondEqualityRule());
						}
						set(
							$current,
							"lhs",
							lv_lhs_1_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='=='
			{
				newLeafNode(otherlv_2, grammarAccess.getCondEqualityAccess().getEqualsSignEqualsSignKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCondEqualityAccess().getRhsComparisonParserRuleCall_0_3_0());
					}
					lv_rhs_3_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCondEqualityRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getCondEqualityAccess().getNotEqualAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCondEqualityAccess().getLhsComparisonParserRuleCall_1_1_0());
					}
					lv_lhs_5_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCondEqualityRule());
						}
						set(
							$current,
							"lhs",
							lv_lhs_5_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6='!='
			{
				newLeafNode(otherlv_6, grammarAccess.getCondEqualityAccess().getExclamationMarkEqualsSignKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCondEqualityAccess().getRhsComparisonParserRuleCall_1_3_0());
					}
					lv_rhs_7_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCondEqualityRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_7_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleCondComparison
entryRuleCondComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCondComparisonRule()); }
	iv_ruleCondComparison=ruleCondComparison
	{ $current=$iv_ruleCondComparison.current; }
	EOF;

// Rule CondComparison
ruleCondComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getCondComparisonAccess().getLessAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCondComparisonAccess().getLhsPlusOrMinusParserRuleCall_0_1_0());
					}
					lv_lhs_1_0=rulePlusOrMinus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCondComparisonRule());
						}
						set(
							$current,
							"lhs",
							lv_lhs_1_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.PlusOrMinus");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2='<'
			{
				newLeafNode(otherlv_2, grammarAccess.getCondComparisonAccess().getLessThanSignKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCondComparisonAccess().getRhsPlusOrMinusParserRuleCall_0_3_0());
					}
					lv_rhs_3_0=rulePlusOrMinus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCondComparisonRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.PlusOrMinus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getCondComparisonAccess().getLessEqAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getCondComparisonAccess().getLhsPlusOrMinusParserRuleCall_1_1_0());
					}
					lv_lhs_5_0=rulePlusOrMinus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCondComparisonRule());
						}
						set(
							$current,
							"lhs",
							lv_lhs_5_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.PlusOrMinus");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6='<='
			{
				newLeafNode(otherlv_6, grammarAccess.getCondComparisonAccess().getLessThanSignEqualsSignKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCondComparisonAccess().getRhsPlusOrMinusParserRuleCall_1_3_0());
					}
					lv_rhs_7_0=rulePlusOrMinus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCondComparisonRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_7_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.PlusOrMinus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	iv_ruleExpr=ruleExpr
	{ $current=$iv_ruleExpr.current; }
	EOF;

// Rule Expr
ruleExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getExprAccess().getOrParserRuleCall());
	}
	this_Or_0=ruleOr
	{
		$current = $this_Or_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrAccess().getOrLhsAction_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getRhsAndParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAndAccess().getEqualityParserRuleCall_0());
		}
		this_Equality_0=ruleEquality
		{
			$current = $this_Equality_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndAccess().getAndLhsAction_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getRhsEqualityParserRuleCall_1_2_0());
					}
					lv_rhs_3_0=ruleEquality
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_3_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.Equality");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEquality
entryRuleEquality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityRule()); }
	iv_ruleEquality=ruleEquality
	{ $current=$iv_ruleEquality.current; }
	EOF;

// Rule Equality
ruleEquality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getEqualityAccess().getEqualLhsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='=='
					{
						newLeafNode(otherlv_2, grammarAccess.getEqualityAccess().getEqualsSignEqualsSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getEqualityAccess().getNotEqualLhsAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='!='
					{
						newLeafNode(otherlv_4, grammarAccess.getEqualityAccess().getExclamationMarkEqualsSignKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityAccess().getRhsComparisonParserRuleCall_1_1_0());
					}
					lv_rhs_5_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_5_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getComparisonAccess().getPlusOrMinusParserRuleCall_0());
		}
		this_PlusOrMinus_0=rulePlusOrMinus
		{
			$current = $this_PlusOrMinus_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonAccess().getLessLhsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='<'
					{
						newLeafNode(otherlv_2, grammarAccess.getComparisonAccess().getLessThanSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonAccess().getLessEqLhsAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='<='
					{
						newLeafNode(otherlv_4, grammarAccess.getComparisonAccess().getLessThanSignEqualsSignKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonAccess().getRhsPlusOrMinusParserRuleCall_1_1_0());
					}
					lv_rhs_5_0=rulePlusOrMinus
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_5_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.PlusOrMinus");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePlusOrMinus
entryRulePlusOrMinus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusOrMinusRule()); }
	iv_rulePlusOrMinus=rulePlusOrMinus
	{ $current=$iv_rulePlusOrMinus.current; }
	EOF;

// Rule PlusOrMinus
rulePlusOrMinus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0());
		}
		this_MulOrDiv_0=ruleMulOrDiv
		{
			$current = $this_MulOrDiv_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getPlusOrMinusAccess().getPlusLhsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='+'
					{
						newLeafNode(otherlv_2, grammarAccess.getPlusOrMinusAccess().getPlusSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getPlusOrMinusAccess().getMinusLhsAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='-'
					{
						newLeafNode(otherlv_4, grammarAccess.getPlusOrMinusAccess().getHyphenMinusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPlusOrMinusAccess().getRhsMulOrDivParserRuleCall_1_1_0());
					}
					lv_rhs_5_0=ruleMulOrDiv
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlusOrMinusRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_5_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.MulOrDiv");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMulOrDiv
entryRuleMulOrDiv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulOrDivRule()); }
	iv_ruleMulOrDiv=ruleMulOrDiv
	{ $current=$iv_ruleMulOrDiv.current; }
	EOF;

// Rule MulOrDiv
ruleMulOrDiv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getMulOrDivAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMulOrDivAccess().getMultLhsAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='*'
					{
						newLeafNode(otherlv_2, grammarAccess.getMulOrDivAccess().getAsteriskKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							/* */
						}
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMulOrDivAccess().getDivLhsAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='/'
					{
						newLeafNode(otherlv_4, grammarAccess.getMulOrDivAccess().getSolidusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulOrDivAccess().getRhsPrimaryParserRuleCall_1_1_0());
					}
					lv_rhs_5_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulOrDivRule());
						}
						set(
							$current,
							"rhs",
							lv_rhs_5_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getExprParserRuleCall_0_1());
			}
			this_Expr_1=ruleExpr
			{
				$current = $this_Expr_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getNotAction_1_0(),
						$current);
				}
			)
			otherlv_4='!'
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExprPrimaryParserRuleCall_1_2_0());
					}
					lv_expr_5_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expr",
							lv_expr_5_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryAccess().getOppositeAction_2_0(),
						$current);
				}
			)
			otherlv_7='-'
			{
				newLeafNode(otherlv_7, grammarAccess.getPrimaryAccess().getHyphenMinusKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryAccess().getExprPrimaryParserRuleCall_2_2_0());
					}
					lv_expr_8_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryRule());
						}
						set(
							$current,
							"expr",
							lv_expr_8_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_3());
		}
		this_Atomic_9=ruleAtomic
		{
			$current = $this_Atomic_9.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	iv_ruleAtomic=ruleAtomic
	{ $current=$iv_ruleAtomic.current; }
	EOF;

// Rule Atomic
ruleAtomic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getIntConstantAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_value_1_0=RULE_INT
					{
						newLeafNode(lv_value_1_0, grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getDoubleConstantAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0=RULE_DOUBLE
					{
						newLeafNode(lv_value_3_0, grammarAccess.getAtomicAccess().getValueDOUBLETerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.DOUBLE");
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getStringConstantAction_2_0(),
						$current);
				}
			)
			(
				(
					lv_value_5_0=RULE_STRING
					{
						newLeafNode(lv_value_5_0, grammarAccess.getAtomicAccess().getValueSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_5_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicAccess().getBoolConstantAction_3_0(),
						$current);
				}
			)
			(
				(
					lv_value_7_0=RULE_BOOL
					{
						newLeafNode(lv_value_7_0, grammarAccess.getAtomicAccess().getValueBOOLTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_7_0,
							"fr.irisa.diverse.adaptivesemantics.AdaptSem.BOOL");
					}
				)
			)
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getSemanticDomainAccessParserRuleCall_4());
		}
		this_SemanticDomainAccess_8=ruleSemanticDomainAccess
		{
			$current = $this_SemanticDomainAccess_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getAtomicAccess().getTerminalAccessExpressionParserRuleCall_5());
		}
		this_TerminalAccessExpression_9=ruleTerminalAccessExpression
		{
			$current = $this_TerminalAccessExpression_9.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFQNRule()); }
	iv_ruleFQN=ruleFQN
	{ $current=$iv_ruleFQN.current.getText(); }
	EOF;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleOperationFQN
entryRuleOperationFQN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperationFQNRule()); }
	iv_ruleOperationFQN=ruleOperationFQN
	{ $current=$iv_ruleOperationFQN.current.getText(); }
	EOF;

// Rule OperationFQN
ruleOperationFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getOperationFQNAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOperationFQNAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getOperationFQNAccess().getIDTerminalRuleCall_1_1());
			}
		)+
	)
;

RULE_BOOL : ('true'|'false');

RULE_DOUBLE : ('0'..'9')+ '.' ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
