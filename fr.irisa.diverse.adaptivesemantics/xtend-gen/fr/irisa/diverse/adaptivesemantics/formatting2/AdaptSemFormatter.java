/**
 * generated by Xtext 2.25.0
 */
package fr.irisa.diverse.adaptivesemantics.formatting2;

import com.google.inject.Inject;
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.AdaptiveSemantics;
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Conclusion;
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Condition;
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Import;
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Model;
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Premise;
import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Rule;
import fr.irisa.diverse.adaptivesemantics.services.AdaptSemGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class AdaptSemFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private AdaptSemGrammarAccess _adaptSemGrammarAccess;
  
  protected void _format(final AdaptiveSemantics adaptiveSemantics, @Extension final IFormattableDocument document) {
    document.<Model>format(adaptiveSemantics.getModel());
    EList<Import> _imports = adaptiveSemantics.getImports();
    for (final Import _import : _imports) {
      document.<Import>format(_import);
    }
    EList<Rule> _rules = adaptiveSemantics.getRules();
    for (final Rule rule : _rules) {
      document.<Rule>format(rule);
    }
  }
  
  protected void _format(final Rule rule, @Extension final IFormattableDocument document) {
    document.<Conclusion>format(rule.getConclusion());
    EList<Premise> _premises = rule.getPremises();
    for (final Premise reduction : _premises) {
      document.<Premise>format(reduction);
    }
    EList<Condition> _conditions = rule.getConditions();
    for (final Condition condition : _conditions) {
      document.<Condition>format(condition);
    }
  }
  
  public void format(final Object adaptiveSemantics, final IFormattableDocument document) {
    if (adaptiveSemantics instanceof XtextResource) {
      _format((XtextResource)adaptiveSemantics, document);
      return;
    } else if (adaptiveSemantics instanceof AdaptiveSemantics) {
      _format((AdaptiveSemantics)adaptiveSemantics, document);
      return;
    } else if (adaptiveSemantics instanceof Rule) {
      _format((Rule)adaptiveSemantics, document);
      return;
    } else if (adaptiveSemantics instanceof EObject) {
      _format((EObject)adaptiveSemantics, document);
      return;
    } else if (adaptiveSemantics == null) {
      _format((Void)null, document);
      return;
    } else if (adaptiveSemantics != null) {
      _format(adaptiveSemantics, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(adaptiveSemantics, document).toString());
    }
  }
}
