/**
 */
package fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.provider;

import fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.util.AdaptivesemanticsAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AdaptivesemanticsItemProviderAdapterFactory extends AdaptivesemanticsAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AdaptivesemanticsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Binding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BindingItemProvider bindingItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Binding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBindingAdapter() {
		if (bindingItemProvider == null) {
			bindingItemProvider = new BindingItemProvider(this);
		}

		return bindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.AdaptiveSemantics} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AdaptiveSemanticsItemProvider adaptiveSemanticsItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.AdaptiveSemantics}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAdaptiveSemanticsAdapter() {
		if (adaptiveSemanticsItemProvider == null) {
			adaptiveSemanticsItemProvider = new AdaptiveSemanticsItemProvider(this);
		}

		return adaptiveSemanticsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Conclusion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConclusionItemProvider conclusionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Conclusion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConclusionAdapter() {
		if (conclusionItemProvider == null) {
			conclusionItemProvider = new ConclusionItemProvider(this);
		}

		return conclusionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Import} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportItemProvider importItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Import}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImportAdapter() {
		if (importItemProvider == null) {
			importItemProvider = new ImportItemProvider(this);
		}

		return importItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Premise} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PremiseItemProvider premiseItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Premise}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPremiseAdapter() {
		if (premiseItemProvider == null) {
			premiseItemProvider = new PremiseItemProvider(this);
		}

		return premiseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Rule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleItemProvider ruleItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Rule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleAdapter() {
		if (ruleItemProvider == null) {
			ruleItemProvider = new RuleItemProvider(this);
		}

		return ruleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.RefConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefConfigurationItemProvider refConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.RefConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefConfigurationAdapter() {
		if (refConfigurationItemProvider == null) {
			refConfigurationItemProvider = new RefConfigurationItemProvider(this);
		}

		return refConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.DefConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DefConfigurationItemProvider defConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.DefConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDefConfigurationAdapter() {
		if (defConfigurationItemProvider == null) {
			defConfigurationItemProvider = new DefConfigurationItemProvider(this);
		}

		return defConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.SymbolDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SymbolDefItemProvider symbolDefItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.SymbolDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSymbolDefAdapter() {
		if (symbolDefItemProvider == null) {
			symbolDefItemProvider = new SymbolDefItemProvider(this);
		}

		return symbolDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.SymbolRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SymbolRefItemProvider symbolRefItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.SymbolRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSymbolRefAdapter() {
		if (symbolRefItemProvider == null) {
			symbolRefItemProvider = new SymbolRefItemProvider(this);
		}

		return symbolRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.ListRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListRefItemProvider listRefItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.ListRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListRefAdapter() {
		if (listRefItemProvider == null) {
			listRefItemProvider = new ListRefItemProvider(this);
		}

		return listRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.ListDef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListDefItemProvider listDefItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.ListDef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListDefAdapter() {
		if (listDefItemProvider == null) {
			listDefItemProvider = new ListDefItemProvider(this);
		}

		return listDefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.VoidList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VoidListItemProvider voidListItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.VoidList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVoidListAdapter() {
		if (voidListItemProvider == null) {
			voidListItemProvider = new VoidListItemProvider(this);
		}

		return voidListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Input} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputItemProvider inputItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Input}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputAdapter() {
		if (inputItemProvider == null) {
			inputItemProvider = new InputItemProvider(this);
		}

		return inputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Output} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputItemProvider outputItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Output}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputAdapter() {
		if (outputItemProvider == null) {
			outputItemProvider = new OutputItemProvider(this);
		}

		return outputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.SemanticDomainAccess} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SemanticDomainAccessItemProvider semanticDomainAccessItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.SemanticDomainAccess}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSemanticDomainAccessAdapter() {
		if (semanticDomainAccessItemProvider == null) {
			semanticDomainAccessItemProvider = new SemanticDomainAccessItemProvider(this);
		}

		return semanticDomainAccessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Self} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelfItemProvider selfItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Self}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelfAdapter() {
		if (selfItemProvider == null) {
			selfItemProvider = new SelfItemProvider(this);
		}

		return selfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Equal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EqualItemProvider equalItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Equal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEqualAdapter() {
		if (equalItemProvider == null) {
			equalItemProvider = new EqualItemProvider(this);
		}

		return equalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.NotEqual} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotEqualItemProvider notEqualItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.NotEqual}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotEqualAdapter() {
		if (notEqualItemProvider == null) {
			notEqualItemProvider = new NotEqualItemProvider(this);
		}

		return notEqualItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Or} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrItemProvider orItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Or}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrAdapter() {
		if (orItemProvider == null) {
			orItemProvider = new OrItemProvider(this);
		}

		return orItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.And} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndItemProvider andItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.And}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndAdapter() {
		if (andItemProvider == null) {
			andItemProvider = new AndItemProvider(this);
		}

		return andItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Not} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotItemProvider notItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Not}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotAdapter() {
		if (notItemProvider == null) {
			notItemProvider = new NotItemProvider(this);
		}

		return notItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Less} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LessItemProvider lessItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Less}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLessAdapter() {
		if (lessItemProvider == null) {
			lessItemProvider = new LessItemProvider(this);
		}

		return lessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.LessEq} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LessEqItemProvider lessEqItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.LessEq}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLessEqAdapter() {
		if (lessEqItemProvider == null) {
			lessEqItemProvider = new LessEqItemProvider(this);
		}

		return lessEqItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Div} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DivItemProvider divItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Div}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDivAdapter() {
		if (divItemProvider == null) {
			divItemProvider = new DivItemProvider(this);
		}

		return divItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Mult} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultItemProvider multItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Mult}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultAdapter() {
		if (multItemProvider == null) {
			multItemProvider = new MultItemProvider(this);
		}

		return multItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Minus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MinusItemProvider minusItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Minus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMinusAdapter() {
		if (minusItemProvider == null) {
			minusItemProvider = new MinusItemProvider(this);
		}

		return minusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Plus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlusItemProvider plusItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Plus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlusAdapter() {
		if (plusItemProvider == null) {
			plusItemProvider = new PlusItemProvider(this);
		}

		return plusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.IntConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntConstantItemProvider intConstantItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.IntConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntConstantAdapter() {
		if (intConstantItemProvider == null) {
			intConstantItemProvider = new IntConstantItemProvider(this);
		}

		return intConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.BoolConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoolConstantItemProvider boolConstantItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.BoolConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoolConstantAdapter() {
		if (boolConstantItemProvider == null) {
			boolConstantItemProvider = new BoolConstantItemProvider(this);
		}

		return boolConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.StringConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringConstantItemProvider stringConstantItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.StringConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringConstantAdapter() {
		if (stringConstantItemProvider == null) {
			stringConstantItemProvider = new StringConstantItemProvider(this);
		}

		return stringConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.DoubleConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoubleConstantItemProvider doubleConstantItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.DoubleConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoubleConstantAdapter() {
		if (doubleConstantItemProvider == null) {
			doubleConstantItemProvider = new DoubleConstantItemProvider(this);
		}

		return doubleConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Opposite} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OppositeItemProvider oppositeItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Opposite}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOppositeAdapter() {
		if (oppositeItemProvider == null) {
			oppositeItemProvider = new OppositeItemProvider(this);
		}

		return oppositeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Is} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IsItemProvider isItemProvider;

	/**
	 * This creates an adapter for a {@link fr.irisa.diverse.adaptivesemantics.model.adaptivesemantics.Is}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIsAdapter() {
		if (isItemProvider == null) {
			isItemProvider = new IsItemProvider(this);
		}

		return isItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (bindingItemProvider != null)
			bindingItemProvider.dispose();
		if (adaptiveSemanticsItemProvider != null)
			adaptiveSemanticsItemProvider.dispose();
		if (conclusionItemProvider != null)
			conclusionItemProvider.dispose();
		if (importItemProvider != null)
			importItemProvider.dispose();
		if (premiseItemProvider != null)
			premiseItemProvider.dispose();
		if (conditionItemProvider != null)
			conditionItemProvider.dispose();
		if (ruleItemProvider != null)
			ruleItemProvider.dispose();
		if (modelItemProvider != null)
			modelItemProvider.dispose();
		if (refConfigurationItemProvider != null)
			refConfigurationItemProvider.dispose();
		if (defConfigurationItemProvider != null)
			defConfigurationItemProvider.dispose();
		if (symbolDefItemProvider != null)
			symbolDefItemProvider.dispose();
		if (symbolRefItemProvider != null)
			symbolRefItemProvider.dispose();
		if (listRefItemProvider != null)
			listRefItemProvider.dispose();
		if (listDefItemProvider != null)
			listDefItemProvider.dispose();
		if (voidListItemProvider != null)
			voidListItemProvider.dispose();
		if (inputItemProvider != null)
			inputItemProvider.dispose();
		if (outputItemProvider != null)
			outputItemProvider.dispose();
		if (semanticDomainAccessItemProvider != null)
			semanticDomainAccessItemProvider.dispose();
		if (selfItemProvider != null)
			selfItemProvider.dispose();
		if (equalItemProvider != null)
			equalItemProvider.dispose();
		if (notEqualItemProvider != null)
			notEqualItemProvider.dispose();
		if (orItemProvider != null)
			orItemProvider.dispose();
		if (andItemProvider != null)
			andItemProvider.dispose();
		if (notItemProvider != null)
			notItemProvider.dispose();
		if (lessItemProvider != null)
			lessItemProvider.dispose();
		if (lessEqItemProvider != null)
			lessEqItemProvider.dispose();
		if (divItemProvider != null)
			divItemProvider.dispose();
		if (multItemProvider != null)
			multItemProvider.dispose();
		if (minusItemProvider != null)
			minusItemProvider.dispose();
		if (plusItemProvider != null)
			plusItemProvider.dispose();
		if (intConstantItemProvider != null)
			intConstantItemProvider.dispose();
		if (boolConstantItemProvider != null)
			boolConstantItemProvider.dispose();
		if (stringConstantItemProvider != null)
			stringConstantItemProvider.dispose();
		if (doubleConstantItemProvider != null)
			doubleConstantItemProvider.dispose();
		if (oppositeItemProvider != null)
			oppositeItemProvider.dispose();
		if (isItemProvider != null)
			isItemProvider.dispose();
	}

}
